{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1486457656978},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1486457656982},{"_id":"themes/jacman/README.md","hash":"dd7b96d6c1c4dcffa61e37f76d5f0e4b4bca4d1b","modified":1486457656990},{"_id":"themes/jacman/README_zh.md","hash":"c7fa5c73edcdbc25aa57c12c1b3c71ebf96d2879","modified":1486457656995},{"_id":"themes/jacman/_config.yml","hash":"f1e6fa7c2d52e44d29e05e862a325c068ff0d598","modified":1487123525447},{"_id":"source/_posts/GIT常用命令备忘.md","hash":"2cde2ebb38c4548bb11ae2ab1b6e2a228343afb1","modified":1487051708575},{"_id":"source/_posts/firstblog.md","hash":"23e662dcb57710325851160386884e65f49a9ea6","modified":1486536622183},{"_id":"source/_posts/friend-of-time.md","hash":"9121075800384708d4455f40447d6fc34abcac4e","modified":1486709535343},{"_id":"source/_posts/hello-world.md","hash":"6ce9b8b5863d853d5d769b660baadbc847aed2db","modified":1486518651490},{"_id":"source/_posts/laravel-not.md","hash":"b2feeda8dfac1c1bbe2faea98ef8119a6faab881","modified":1486536613895},{"_id":"source/_posts/laravel笔记一-laravel-安装和数据迁移填充.md","hash":"cbc1e345ec1b65598e26a9ce34b70e165c011ae0","modified":1486717603114},{"_id":"source/_posts/蔡氏效应.md","hash":"82328b52eb2db0031d18f48727dcc09e90ac8059","modified":1486632638572},{"_id":"source/about/index.md","hash":"31bfd5c9346d074b21e46f2fe42f3fb5309b0829","modified":1486540915979},{"_id":"themes/jacman/.git/FETCH_HEAD","hash":"3bbdfdf3435caa02da8c96448848ff0f5adec357","modified":1486457995931},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486457656951},{"_id":"themes/jacman/.git/ORIG_HEAD","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1486457995982},{"_id":"themes/jacman/.git/config","hash":"b3a21db5b179edac7874b32200ec23ede61361fe","modified":1486457656965},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486457616878},{"_id":"themes/jacman/.git/index","hash":"c7ba5c90fef6e882f585e5f63db120377fb9f3b6","modified":1487125910005},{"_id":"themes/jacman/.git/packed-refs","hash":"facb04d8a7e4221a4b0b3dc3062a8ca586ade15d","modified":1486457656944},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1486457656999},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1486457657005},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1486457657007},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1486457657283},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1486457657288},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1486457657297},{"_id":"themes/jacman/layout/layout.ejs","hash":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1486457657298},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1486457657302},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1486457657306},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1486457657309},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1486457657310},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486457616887},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486457616879},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486457616883},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486457616892},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486457616900},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486457616897},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486457616904},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486457616901},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1486457616905},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486457616910},{"_id":"themes/jacman/.git/logs/HEAD","hash":"25cad35f63e57c134948eb2d0a87c280e229311e","modified":1486457656958},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"f0772c9de0431384d4e852358ee425a1cdf3ea6d","modified":1486457657059},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1486457657060},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1486457657074},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"9f2f0ff9683ea0f48ec0284b2f4aa5fa0db799e3","modified":1486522327060},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1486457657080},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1486457657087},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"c4358de4ea1372ea68ff5dc0f4257c348d516990","modified":1487125909870},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1486457657114},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1486457657131},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1486457657149},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1486457657150},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1486457657213},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1486457657227},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1486457657232},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1486457657244},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1486457657247},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1486457657250},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1486457657253},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1486457657257},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1486457657258},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1486457657263},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1486457657267},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1486457657274},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1486457657277},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1486457657281},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1486457657370},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486457657372},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486457657374},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486457657375},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486457657376},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486457657377},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486457657379},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1486457657423},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1486457657442},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1486457657490},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1486457657525},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1486457657505},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1486457657547},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1486457657554},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1486457657569},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1486457657593},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1486457657598},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1486457657611},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1486457657615},{"_id":"themes/jacman/source/img/author.jpg","hash":"f085d6a2554b527b8b298778e570f95e746dbf21","modified":1486477880098},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1486457657631},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1486457657639},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1486457657643},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1486457657647},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1486457657652},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1486457657657},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1486457657660},{"_id":"themes/jacman/source/img/favicon.ico","hash":"5b29ceb9728547a5344d524f89bf9c553c3d9378","modified":1486520377219},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1486457657662},{"_id":"themes/jacman/source/img/logo.png","hash":"c142ec7887ecbac0d0b0d6c75b8c461e56719e19","modified":1486521274572},{"_id":"themes/jacman/source/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1486457657671},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1486457657672},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1486457657673},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1486457657723},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1486457657741},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1486457657747},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1486457657532},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1486457657589},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1486457657606},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1486457657708},{"_id":"themes/jacman/.git/objects/pack/pack-352b776ab9cb72bab8e2a24baee8df6b10f4501e.idx","hash":"0eabe63f934123f57a88ce80a6b86a3e9f753a2f","modified":1486457656890},{"_id":"themes/jacman/.git/refs/heads/master","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1486457656956},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1486457657174},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1486457657159},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1486457657173},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1486457657181},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1486457657189},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1486457657188},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1486457657199},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1486457657204},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1486457657313},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"2c23f3f47eb768b31d4d86d56255ffb1e8bcf6c9","modified":1486457657322},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1486457657329},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1486457657330},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1486457657330},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1486457657340},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1486457657342},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1486457657343},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1486457657347},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1486457657358},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"1f9d8c513f05790742c17fc125cb6a1ad374065a","modified":1486457657362},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1486457657365},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486457657380},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1486457657385},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1486457657384},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1486457657396},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1486457657399},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1486457657417},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1486457657580},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1486457657627},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"25cad35f63e57c134948eb2d0a87c280e229311e","modified":1486457656957},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486457656945},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1486457657317},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1486457657321},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"25cad35f63e57c134948eb2d0a87c280e229311e","modified":1486457656949},{"_id":"themes/jacman/.git/objects/pack/pack-352b776ab9cb72bab8e2a24baee8df6b10f4501e.pack","hash":"05788e7797aafc3f621ccf6388498266e4d03862","modified":1486457656897}],"Category":[{"name":"编程","_id":"ciz6db8xr0003qckixqsxohnw"},{"name":"读书笔记","_id":"ciz6db8yb000fqckiwxxy8cs6"},{"name":"杂谈","_id":"ciz6db8yf000lqckir07kqndw"}],"Data":[],"Page":[{"title":"about | 关于我","date":"2017-02-08T01:39:42.000Z","_content":"\n- 邮箱:jeremykuang@foxmail.com\n- github:https://github.com/jeristiano\n- bio: 余生不用你指教了 我自己瞎几把过吧\n\n","source":"about/index.md","raw":"---\ntitle: about | 关于我\ndate: 2017-02-08 09:39:42\n---\n\n- 邮箱:jeremykuang@foxmail.com\n- github:https://github.com/jeristiano\n- bio: 余生不用你指教了 我自己瞎几把过吧\n\n","updated":"2017-02-08T08:01:55.979Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciz6db8x70001qckiwr5nlly1","content":"<ul>\n<li>邮箱:jeremykuang@foxmail.com</li>\n<li>github:<a href=\"https://github.com/jeristiano\" target=\"_blank\" rel=\"external\">https://github.com/jeristiano</a></li>\n<li>bio: 余生不用你指教了 我自己瞎几把过吧</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>邮箱:jeremykuang@foxmail.com</li>\n<li>github:<a href=\"https://github.com/jeristiano\">https://github.com/jeristiano</a></li>\n<li>bio: 余生不用你指教了 我自己瞎几把过吧</li>\n</ul>\n"}],"Post":[{"title":"windows系统下安装Composer","date":"2017-02-08T05:25:28.000Z","_content":"### Composer介绍\nComposer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 \"packages\" 和 \"libraries\"，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。\n\n\tComposer下载\n\t下载地址：getcom poser.org    （去掉空格）\n\t中文镜像：phpcom poser.com  （去掉空格）\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png)\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png)\n\n下载成功\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png)\n\n准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png)\n\n选择NEXT，稍等一会，下载相关组建\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png)\n\n显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png)\n验证是否成功。打开win+R -> cmd 输入 composer,显示如下界面 表示安装成功！![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png)\n\n### 启用镜像服务的方式有两种：\n\t系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。\n\t单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。\n例1：修改 composer 的全局配置文件（推荐方式）\n打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：\n\n```\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：\n```json\n  \"repositories\": {\n  \"packagist\": { \n   \"type\": \"composer\", \n   \"url\": \"https://packagist.phpcomposer.com\"\n   }\n}\n```\n以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：\n```\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"laravel/framework\": \"5.2.*\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~4.0\",\n        \"symfony/css-selector\": \"2.8.*|3.0.*\",\n        \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ],\n        \"post-install-cmd\": [\n            \"php artisan clear-compiled\",\n            \"php artisan optimize\"\n        ],\n        \"pre-update-cmd\": [\n            \"php artisan clear-compiled\"\n        ],\n        \"post-update-cmd\": [\n            \"php artisan optimize\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"repositories\": {\n        \"packagist\": {\n            \"type\": \"composer\",\n            \"url\": \"https://packagist.phpcomposer.com\"\n        }\n    }\n}\n```\n\n```\n//转换成中文镜像\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n//安装版本\ncomposer create-project laravel/laravel your-project-name 5.0.*\n```\n\n\n","source":"_posts/firstblog.md","raw":"---\ntitle: windows系统下安装Composer\ndate: 2017-02-08 13:25:28\ncategories: 编程\ntags: laravel\n---\n### Composer介绍\nComposer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 \"packages\" 和 \"libraries\"，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。\n\n\tComposer下载\n\t下载地址：getcom poser.org    （去掉空格）\n\t中文镜像：phpcom poser.com  （去掉空格）\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png)\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png)\n\n下载成功\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png)\n\n准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。\n\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png)\n\n选择NEXT，稍等一会，下载相关组建\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png)\n\n显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开\n![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png)\n验证是否成功。打开win+R -> cmd 输入 composer,显示如下界面 表示安装成功！![enter image description here](http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png)\n\n### 启用镜像服务的方式有两种：\n\t系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。\n\t单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。\n例1：修改 composer 的全局配置文件（推荐方式）\n打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：\n\n```\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：\n```json\n  \"repositories\": {\n  \"packagist\": { \n   \"type\": \"composer\", \n   \"url\": \"https://packagist.phpcomposer.com\"\n   }\n}\n```\n以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：\n```\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"laravel/framework\": \"5.2.*\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~4.0\",\n        \"symfony/css-selector\": \"2.8.*|3.0.*\",\n        \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ],\n        \"post-install-cmd\": [\n            \"php artisan clear-compiled\",\n            \"php artisan optimize\"\n        ],\n        \"pre-update-cmd\": [\n            \"php artisan clear-compiled\"\n        ],\n        \"post-update-cmd\": [\n            \"php artisan optimize\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"repositories\": {\n        \"packagist\": {\n            \"type\": \"composer\",\n            \"url\": \"https://packagist.phpcomposer.com\"\n        }\n    }\n}\n```\n\n```\n//转换成中文镜像\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n//安装版本\ncomposer create-project laravel/laravel your-project-name 5.0.*\n```\n\n\n","slug":"firstblog","published":1,"updated":"2017-02-08T06:50:22.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8x70000qckiz7b351l9","content":"<h3 id=\"Composer介绍\"><a href=\"#Composer介绍\" class=\"headerlink\" title=\"Composer介绍\"></a>Composer介绍</h3><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p>\n<pre><code>Composer下载\n下载地址：getcom poser.org    （去掉空格）\n中文镜像：phpcom poser.com  （去掉空格）\n</code></pre><p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png\" alt=\"enter image description here\"><br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png\" alt=\"enter image description here\"></p>\n<p>下载成功</p>\n<p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png\" alt=\"enter image description here\"></p>\n<p>准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。</p>\n<p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png\" alt=\"enter image description here\"></p>\n<p>选择NEXT，稍等一会，下载相关组建<br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png\" alt=\"enter image description here\"></p>\n<p>显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开<br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png\" alt=\"enter image description here\"><br>验证是否成功。打开win+R -&gt; cmd 输入 composer,显示如下界面 表示安装成功！<img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png\" alt=\"enter image description here\"></p>\n<h3 id=\"启用镜像服务的方式有两种：\"><a href=\"#启用镜像服务的方式有两种：\" class=\"headerlink\" title=\"启用镜像服务的方式有两种：\"></a>启用镜像服务的方式有两种：</h3><pre><code>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。\n单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。\n</code></pre><p>例1：修改 composer 的全局配置文件（推荐方式）<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>\n<p>上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  \"repositories\": &#123;</div><div class=\"line\">  \"packagist\": &#123; </div><div class=\"line\">   \"type\": \"composer\", </div><div class=\"line\">   \"url\": \"https://packagist.phpcomposer.com\"</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;laravel/laravel&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;The Laravel Framework.&quot;,</div><div class=\"line\">    &quot;keywords&quot;: [</div><div class=\"line\">        &quot;framework&quot;,</div><div class=\"line\">        &quot;laravel&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;project&quot;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,</div><div class=\"line\">        &quot;laravel/framework&quot;: &quot;5.2.*&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;0.9.*&quot;,</div><div class=\"line\">        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,</div><div class=\"line\">        &quot;symfony/css-selector&quot;: &quot;2.8.*|3.0.*&quot;,</div><div class=\"line\">        &quot;symfony/dom-crawler&quot;: &quot;2.8.*|3.0.*&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;database&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;App\\\\&quot;: &quot;app/&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;tests/TestCase.php&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;scripts&quot;: &#123;</div><div class=\"line\">        &quot;post-root-package-install&quot;: [</div><div class=\"line\">            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-create-project-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan key:generate&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-install-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan clear-compiled&quot;,</div><div class=\"line\">            &quot;php artisan optimize&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;pre-update-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan clear-compiled&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-update-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan optimize&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;preferred-install&quot;: &quot;dist&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;repositories&quot;: &#123;</div><div class=\"line\">        &quot;packagist&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//转换成中文镜像</div><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class=\"line\">//安装版本</div><div class=\"line\">composer create-project laravel/laravel your-project-name 5.0.*</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"Composer介绍\"><a href=\"#Composer介绍\" class=\"headerlink\" title=\"Composer介绍\"></a>Composer介绍</h3><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p>\n<pre><code>Composer下载\n下载地址：getcom poser.org    （去掉空格）\n中文镜像：phpcom poser.com  （去掉空格）\n</code></pre><p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png\" alt=\"enter image description here\"><br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png\" alt=\"enter image description here\"></p>\n<p>下载成功</p>\n<p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png\" alt=\"enter image description here\"></p>\n<p>准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。</p>\n<p><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png\" alt=\"enter image description here\"></p>\n<p>选择NEXT，稍等一会，下载相关组建<br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png\" alt=\"enter image description here\"></p>\n<p>显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开<br><img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png\" alt=\"enter image description here\"><br>验证是否成功。打开win+R -&gt; cmd 输入 composer,显示如下界面 表示安装成功！<img src=\"http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png\" alt=\"enter image description here\"></p>\n<h3 id=\"启用镜像服务的方式有两种：\"><a href=\"#启用镜像服务的方式有两种：\" class=\"headerlink\" title=\"启用镜像服务的方式有两种：\"></a>启用镜像服务的方式有两种：</h3><pre><code>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。\n单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。\n</code></pre><p>例1：修改 composer 的全局配置文件（推荐方式）<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>\n<p>上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  \"repositories\": &#123;</div><div class=\"line\">  \"packagist\": &#123; </div><div class=\"line\">   \"type\": \"composer\", </div><div class=\"line\">   \"url\": \"https://packagist.phpcomposer.com\"</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;laravel/laravel&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;The Laravel Framework.&quot;,</div><div class=\"line\">    &quot;keywords&quot;: [</div><div class=\"line\">        &quot;framework&quot;,</div><div class=\"line\">        &quot;laravel&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;project&quot;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,</div><div class=\"line\">        &quot;laravel/framework&quot;: &quot;5.2.*&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;0.9.*&quot;,</div><div class=\"line\">        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,</div><div class=\"line\">        &quot;symfony/css-selector&quot;: &quot;2.8.*|3.0.*&quot;,</div><div class=\"line\">        &quot;symfony/dom-crawler&quot;: &quot;2.8.*|3.0.*&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;database&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;App\\\\&quot;: &quot;app/&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;tests/TestCase.php&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;scripts&quot;: &#123;</div><div class=\"line\">        &quot;post-root-package-install&quot;: [</div><div class=\"line\">            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-create-project-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan key:generate&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-install-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan clear-compiled&quot;,</div><div class=\"line\">            &quot;php artisan optimize&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;pre-update-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan clear-compiled&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        &quot;post-update-cmd&quot;: [</div><div class=\"line\">            &quot;php artisan optimize&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;preferred-install&quot;: &quot;dist&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;repositories&quot;: &#123;</div><div class=\"line\">        &quot;packagist&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//转换成中文镜像</div><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class=\"line\">//安装版本</div><div class=\"line\">composer create-project laravel/laravel your-project-name 5.0.*</div></pre></td></tr></table></figure>\n"},{"title":"GIT常用命令备忘","date":"2017-02-14T05:18:50.000Z","_content":"\n> 转载:原文出处http://stormzhang.com/git/2014/01/27/git-common-command/\n\n### Git配置\n\n```\ngit config --global user.name \"storm\"\ngit config --global user.email \"stormzhang.dev@gmail.com\"\ngit config --global color.ui true\ngit config --global alias.co checkout  # 别名\ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.br branch\ngit config --global core.editor \"vim\"  # 设置Editor使用vim\ngit config --global core.quotepath false # 设置显示中文文件名\n\n```\n`用户的git配置文件~/.gitconfig`\n\n\n### Git常用命令\n\n\n`查看、添加、提交、删除、找回，重置修改文件`\n\n```\ngit help <command>  # 显示command的help\ngit show            # 显示某次提交的内容\ngit show $id\n\ngit co  -- <file>   # 抛弃工作区修改\ngit co  .           # 抛弃工作区修改\n\ngit add <file>      # 将工作文件修改提交到本地暂存区\ngit add .           # 将所有修改过的工作文件提交暂存区\n\ngit rm <file>       # 从版本库中删除文件\ngit rm <file> --cached  # 从版本库中删除文件，但不删除文件\n\ngit reset <file>    # 从暂存区恢复到工作文件\ngit reset -- .      # 从暂存区恢复到工作文件\ngit reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\ngit ci <file>\ngit ci .\ngit ci -a           # 将git add, git rm和git ci等操作都合并在一起做\ngit ci -am \"some comments\"\ngit ci --amend      # 修改最后一次提交记录\n\ngit revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象\ngit revert HEAD     # 恢复最后一次提交的状态\n\n```\n\n`查看文件diff`\n\n```\ngit diff <file>     # 比较当前文件和暂存区文件差异\ngit diff\ngit diff <$id1> <$id2>   # 比较两次提交之间的差异\ngit diff <branch1>..<branch2> # 在两个分支之间比较 \ngit diff --staged   # 比较暂存区和版本库差异\ngit diff --cached   # 比较暂存区和版本库差异\ngit diff --stat     # 仅仅比较统计信息\n\n```\n\n`查看提交记录`\n\n```\ngit log\ngit log <file>      # 查看该文件每次提交记录\ngit log -p <file>   # 查看每次详细修改内容的diff\ngit log -p -2       # 查看最近两次详细\n\n```\n\ntig\n\nMac上可以使用tig代替diff和log，brew install tig\n\n### Git 本地分支管理\n\n`查看、切换、创建和删除分支`\n\n```\ngit br -r           # 查看远程分支\ngit br <new_branch> # 创建新的分支\ngit br -v           # 查看各个分支最后提交信息\ngit br --merged     # 查看已经被合并到当前分支的分支\ngit br --no-merged  # 查看尚未被合并到当前分支的分支\n\ngit co <branch>     # 切换到某个分支\ngit co -b <new_branch> # 创建新的分支，并且切换过去\ngit co -b <new_branch> <branch>  # 基于branch创建新的new_branch\n\ngit co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\ngit co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支\n\ngit br -d <branch>  # 删除某个分支\ngit br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n\n```\n`分支合并和rebase`\n\n```\ngit merge <branch>               # 将branch分支合并到当前分支\ngit merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交\n\ngit rebase master <branch>       # 将master rebase到branch，相当于：\ngit co <branch> && git rebase master && git co master && git merge <branch>\n\n```\n\n`Git补丁管理(方便在多台机器上开发同步时用)`\n\n```\ngit diff > ../sync.patch         # 生成补丁\ngit apply ../sync.patch          # 打补丁\ngit apply --check ../sync.patch  # 测试补丁能否成功\n\n```\n\n`Git暂存管理`\n\n```\ngit stash                        # 暂存\ngit stash list                   # 列所有stash\ngit stash apply                  # 恢复暂存的内容\ngit stash drop                   # 删除暂存区\ngit stash clear\n```\n\n`Git远程分支管理`\n\n```\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地\ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\ngit fetch origin                 # 抓取远程仓库更新\ngit merge origin/master          # 将远程主分支合并到本地当前分支\ngit co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支\ngit co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上\n\ngit push                         # push所有分支\ngit push origin master           # 将本地主分支推到远程主分支\ngit push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名\ngit push origin <local_branch>:<remote_branch>  # 创建远程分支\ngit push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支\n\n```\n\n`Git远程仓库管理`\n\n```\ngit remote -v                    # 查看远程服务器地址和仓库名称\ngit remote show origin           # 查看远程服务器仓库状态\ngit remote add origin git@github:stormzhang/demo.git         # 添加远程仓库地址\ngit remote set-url origin git@github.com:stormzhang/demo.git # 设置远程仓库地址(用于修改远程仓库地址\n\n```\n\n`创建远程仓库`\n\n```\ngit clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库\nscp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上\n\nmkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库\ngit remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址\ngit push -u origin master                                      # 客户端首次提交\ngit push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track\n\ngit remote set-head origin master   # 设置远程仓库的HEAD指向master分支\n\n```\n\n`也可以命令设置跟踪远程库和本地库`\n\n```\ngit branch --set-upstream master origin/master\ngit branch --set-upstream develop origin/develop\n\n```","source":"_posts/GIT常用命令备忘.md","raw":"---\ntitle: GIT常用命令备忘\ndate: 2017-02-14 13:18:50\ntags: git\ncategories: 编程\n---\n\n> 转载:原文出处http://stormzhang.com/git/2014/01/27/git-common-command/\n\n### Git配置\n\n```\ngit config --global user.name \"storm\"\ngit config --global user.email \"stormzhang.dev@gmail.com\"\ngit config --global color.ui true\ngit config --global alias.co checkout  # 别名\ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.br branch\ngit config --global core.editor \"vim\"  # 设置Editor使用vim\ngit config --global core.quotepath false # 设置显示中文文件名\n\n```\n`用户的git配置文件~/.gitconfig`\n\n\n### Git常用命令\n\n\n`查看、添加、提交、删除、找回，重置修改文件`\n\n```\ngit help <command>  # 显示command的help\ngit show            # 显示某次提交的内容\ngit show $id\n\ngit co  -- <file>   # 抛弃工作区修改\ngit co  .           # 抛弃工作区修改\n\ngit add <file>      # 将工作文件修改提交到本地暂存区\ngit add .           # 将所有修改过的工作文件提交暂存区\n\ngit rm <file>       # 从版本库中删除文件\ngit rm <file> --cached  # 从版本库中删除文件，但不删除文件\n\ngit reset <file>    # 从暂存区恢复到工作文件\ngit reset -- .      # 从暂存区恢复到工作文件\ngit reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\ngit ci <file>\ngit ci .\ngit ci -a           # 将git add, git rm和git ci等操作都合并在一起做\ngit ci -am \"some comments\"\ngit ci --amend      # 修改最后一次提交记录\n\ngit revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象\ngit revert HEAD     # 恢复最后一次提交的状态\n\n```\n\n`查看文件diff`\n\n```\ngit diff <file>     # 比较当前文件和暂存区文件差异\ngit diff\ngit diff <$id1> <$id2>   # 比较两次提交之间的差异\ngit diff <branch1>..<branch2> # 在两个分支之间比较 \ngit diff --staged   # 比较暂存区和版本库差异\ngit diff --cached   # 比较暂存区和版本库差异\ngit diff --stat     # 仅仅比较统计信息\n\n```\n\n`查看提交记录`\n\n```\ngit log\ngit log <file>      # 查看该文件每次提交记录\ngit log -p <file>   # 查看每次详细修改内容的diff\ngit log -p -2       # 查看最近两次详细\n\n```\n\ntig\n\nMac上可以使用tig代替diff和log，brew install tig\n\n### Git 本地分支管理\n\n`查看、切换、创建和删除分支`\n\n```\ngit br -r           # 查看远程分支\ngit br <new_branch> # 创建新的分支\ngit br -v           # 查看各个分支最后提交信息\ngit br --merged     # 查看已经被合并到当前分支的分支\ngit br --no-merged  # 查看尚未被合并到当前分支的分支\n\ngit co <branch>     # 切换到某个分支\ngit co -b <new_branch> # 创建新的分支，并且切换过去\ngit co -b <new_branch> <branch>  # 基于branch创建新的new_branch\n\ngit co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\ngit co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支\n\ngit br -d <branch>  # 删除某个分支\ngit br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n\n```\n`分支合并和rebase`\n\n```\ngit merge <branch>               # 将branch分支合并到当前分支\ngit merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交\n\ngit rebase master <branch>       # 将master rebase到branch，相当于：\ngit co <branch> && git rebase master && git co master && git merge <branch>\n\n```\n\n`Git补丁管理(方便在多台机器上开发同步时用)`\n\n```\ngit diff > ../sync.patch         # 生成补丁\ngit apply ../sync.patch          # 打补丁\ngit apply --check ../sync.patch  # 测试补丁能否成功\n\n```\n\n`Git暂存管理`\n\n```\ngit stash                        # 暂存\ngit stash list                   # 列所有stash\ngit stash apply                  # 恢复暂存的内容\ngit stash drop                   # 删除暂存区\ngit stash clear\n```\n\n`Git远程分支管理`\n\n```\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地\ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\ngit fetch origin                 # 抓取远程仓库更新\ngit merge origin/master          # 将远程主分支合并到本地当前分支\ngit co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支\ngit co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上\n\ngit push                         # push所有分支\ngit push origin master           # 将本地主分支推到远程主分支\ngit push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名\ngit push origin <local_branch>:<remote_branch>  # 创建远程分支\ngit push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支\n\n```\n\n`Git远程仓库管理`\n\n```\ngit remote -v                    # 查看远程服务器地址和仓库名称\ngit remote show origin           # 查看远程服务器仓库状态\ngit remote add origin git@github:stormzhang/demo.git         # 添加远程仓库地址\ngit remote set-url origin git@github.com:stormzhang/demo.git # 设置远程仓库地址(用于修改远程仓库地址\n\n```\n\n`创建远程仓库`\n\n```\ngit clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库\nscp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上\n\nmkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库\ngit remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址\ngit push -u origin master                                      # 客户端首次提交\ngit push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track\n\ngit remote set-head origin master   # 设置远程仓库的HEAD指向master分支\n\n```\n\n`也可以命令设置跟踪远程库和本地库`\n\n```\ngit branch --set-upstream master origin/master\ngit branch --set-upstream develop origin/develop\n\n```","slug":"GIT常用命令备忘","published":1,"updated":"2017-02-14T05:55:08.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8x70002qckinv5uryy6","content":"<blockquote>\n<p>转载:原文出处<a href=\"http://stormzhang.com/git/2014/01/27/git-common-command/\" target=\"_blank\" rel=\"external\">http://stormzhang.com/git/2014/01/27/git-common-command/</a></p>\n</blockquote>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;storm&quot;</div><div class=\"line\">git config --global user.email &quot;stormzhang.dev@gmail.com&quot;</div><div class=\"line\">git config --global color.ui true</div><div class=\"line\">git config --global alias.co checkout  # 别名</div><div class=\"line\">git config --global alias.ci commit</div><div class=\"line\">git config --global alias.st status</div><div class=\"line\">git config --global alias.br branch</div><div class=\"line\">git config --global core.editor &quot;vim&quot;  # 设置Editor使用vim</div><div class=\"line\">git config --global core.quotepath false # 设置显示中文文件名</div></pre></td></tr></table></figure>\n<p><code>用户的git配置文件~/.gitconfig</code></p>\n<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><p><code>查看、添加、提交、删除、找回，重置修改文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">git help &lt;command&gt;  # 显示command的help</div><div class=\"line\">git show            # 显示某次提交的内容</div><div class=\"line\">git show $id</div><div class=\"line\"></div><div class=\"line\">git co  -- &lt;file&gt;   # 抛弃工作区修改</div><div class=\"line\">git co  .           # 抛弃工作区修改</div><div class=\"line\"></div><div class=\"line\">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</div><div class=\"line\">git add .           # 将所有修改过的工作文件提交暂存区</div><div class=\"line\"></div><div class=\"line\">git rm &lt;file&gt;       # 从版本库中删除文件</div><div class=\"line\">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</div><div class=\"line\"></div><div class=\"line\">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</div><div class=\"line\">git reset -- .      # 从暂存区恢复到工作文件</div><div class=\"line\">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class=\"line\"></div><div class=\"line\">git ci &lt;file&gt;</div><div class=\"line\">git ci .</div><div class=\"line\">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</div><div class=\"line\">git ci -am &quot;some comments&quot;</div><div class=\"line\">git ci --amend      # 修改最后一次提交记录</div><div class=\"line\"></div><div class=\"line\">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</div><div class=\"line\">git revert HEAD     # 恢复最后一次提交的状态</div></pre></td></tr></table></figure>\n<p><code>查看文件diff</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</div><div class=\"line\">git diff</div><div class=\"line\">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</div><div class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class=\"line\">git diff --staged   # 比较暂存区和版本库差异</div><div class=\"line\">git diff --cached   # 比较暂存区和版本库差异</div><div class=\"line\">git diff --stat     # 仅仅比较统计信息</div></pre></td></tr></table></figure>\n<p><code>查看提交记录</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div><div class=\"line\">git log &lt;file&gt;      # 查看该文件每次提交记录</div><div class=\"line\">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</div><div class=\"line\">git log -p -2       # 查看最近两次详细</div></pre></td></tr></table></figure>\n<p>tig</p>\n<p>Mac上可以使用tig代替diff和log，brew install tig</p>\n<h3 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h3><p><code>查看、切换、创建和删除分支</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">git br -r           # 查看远程分支</div><div class=\"line\">git br &lt;new_branch&gt; # 创建新的分支</div><div class=\"line\">git br -v           # 查看各个分支最后提交信息</div><div class=\"line\">git br --merged     # 查看已经被合并到当前分支的分支</div><div class=\"line\">git br --no-merged  # 查看尚未被合并到当前分支的分支</div><div class=\"line\"></div><div class=\"line\">git co &lt;branch&gt;     # 切换到某个分支</div><div class=\"line\">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</div><div class=\"line\">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</div><div class=\"line\"></div><div class=\"line\">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class=\"line\">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</div><div class=\"line\"></div><div class=\"line\">git br -d &lt;branch&gt;  # 删除某个分支</div><div class=\"line\">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div></pre></td></tr></table></figure>\n<p><code>分支合并和rebase</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</div><div class=\"line\">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</div><div class=\"line\"></div><div class=\"line\">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</div><div class=\"line\">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>\n<p><code>Git补丁管理(方便在多台机器上开发同步时用)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &gt; ../sync.patch         # 生成补丁</div><div class=\"line\">git apply ../sync.patch          # 打补丁</div><div class=\"line\">git apply --check ../sync.patch  # 测试补丁能否成功</div></pre></td></tr></table></figure>\n<p><code>Git暂存管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash                        # 暂存</div><div class=\"line\">git stash list                   # 列所有stash</div><div class=\"line\">git stash apply                  # 恢复暂存的内容</div><div class=\"line\">git stash drop                   # 删除暂存区</div><div class=\"line\">git stash clear</div></pre></td></tr></table></figure>\n<p><code>Git远程分支管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull                         # 抓取远程仓库所有分支更新并合并到本地</div><div class=\"line\">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class=\"line\">git fetch origin                 # 抓取远程仓库更新</div><div class=\"line\">git merge origin/master          # 将远程主分支合并到本地当前分支</div><div class=\"line\">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</div><div class=\"line\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</div><div class=\"line\"></div><div class=\"line\">git push                         # push所有分支</div><div class=\"line\">git push origin master           # 将本地主分支推到远程主分支</div><div class=\"line\">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class=\"line\">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</div><div class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</div><div class=\"line\">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div></pre></td></tr></table></figure>\n<p><code>Git远程仓库管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v                    # 查看远程服务器地址和仓库名称</div><div class=\"line\">git remote show origin           # 查看远程服务器仓库状态</div><div class=\"line\">git remote add origin git@github:stormzhang/demo.git         # 添加远程仓库地址</div><div class=\"line\">git remote set-url origin git@github.com:stormzhang/demo.git # 设置远程仓库地址(用于修改远程仓库地址</div></pre></td></tr></table></figure>\n<p><code>创建远程仓库</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</div><div class=\"line\">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</div><div class=\"line\"></div><div class=\"line\">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class=\"line\">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</div><div class=\"line\">git push -u origin master                                      # 客户端首次提交</div><div class=\"line\">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</div><div class=\"line\"></div><div class=\"line\">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</div></pre></td></tr></table></figure>\n<p><code>也可以命令设置跟踪远程库和本地库</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream master origin/master</div><div class=\"line\">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>转载:原文出处<a href=\"http://stormzhang.com/git/2014/01/27/git-common-command/\">http://stormzhang.com/git/2014/01/27/git-common-command/</a></p>\n</blockquote>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;storm&quot;</div><div class=\"line\">git config --global user.email &quot;stormzhang.dev@gmail.com&quot;</div><div class=\"line\">git config --global color.ui true</div><div class=\"line\">git config --global alias.co checkout  # 别名</div><div class=\"line\">git config --global alias.ci commit</div><div class=\"line\">git config --global alias.st status</div><div class=\"line\">git config --global alias.br branch</div><div class=\"line\">git config --global core.editor &quot;vim&quot;  # 设置Editor使用vim</div><div class=\"line\">git config --global core.quotepath false # 设置显示中文文件名</div></pre></td></tr></table></figure>\n<p><code>用户的git配置文件~/.gitconfig</code></p>\n<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><p><code>查看、添加、提交、删除、找回，重置修改文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">git help &lt;command&gt;  # 显示command的help</div><div class=\"line\">git show            # 显示某次提交的内容</div><div class=\"line\">git show $id</div><div class=\"line\"></div><div class=\"line\">git co  -- &lt;file&gt;   # 抛弃工作区修改</div><div class=\"line\">git co  .           # 抛弃工作区修改</div><div class=\"line\"></div><div class=\"line\">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</div><div class=\"line\">git add .           # 将所有修改过的工作文件提交暂存区</div><div class=\"line\"></div><div class=\"line\">git rm &lt;file&gt;       # 从版本库中删除文件</div><div class=\"line\">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</div><div class=\"line\"></div><div class=\"line\">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</div><div class=\"line\">git reset -- .      # 从暂存区恢复到工作文件</div><div class=\"line\">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class=\"line\"></div><div class=\"line\">git ci &lt;file&gt;</div><div class=\"line\">git ci .</div><div class=\"line\">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</div><div class=\"line\">git ci -am &quot;some comments&quot;</div><div class=\"line\">git ci --amend      # 修改最后一次提交记录</div><div class=\"line\"></div><div class=\"line\">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</div><div class=\"line\">git revert HEAD     # 恢复最后一次提交的状态</div></pre></td></tr></table></figure>\n<p><code>查看文件diff</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</div><div class=\"line\">git diff</div><div class=\"line\">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</div><div class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class=\"line\">git diff --staged   # 比较暂存区和版本库差异</div><div class=\"line\">git diff --cached   # 比较暂存区和版本库差异</div><div class=\"line\">git diff --stat     # 仅仅比较统计信息</div></pre></td></tr></table></figure>\n<p><code>查看提交记录</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div><div class=\"line\">git log &lt;file&gt;      # 查看该文件每次提交记录</div><div class=\"line\">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</div><div class=\"line\">git log -p -2       # 查看最近两次详细</div></pre></td></tr></table></figure>\n<p>tig</p>\n<p>Mac上可以使用tig代替diff和log，brew install tig</p>\n<h3 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h3><p><code>查看、切换、创建和删除分支</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">git br -r           # 查看远程分支</div><div class=\"line\">git br &lt;new_branch&gt; # 创建新的分支</div><div class=\"line\">git br -v           # 查看各个分支最后提交信息</div><div class=\"line\">git br --merged     # 查看已经被合并到当前分支的分支</div><div class=\"line\">git br --no-merged  # 查看尚未被合并到当前分支的分支</div><div class=\"line\"></div><div class=\"line\">git co &lt;branch&gt;     # 切换到某个分支</div><div class=\"line\">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</div><div class=\"line\">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</div><div class=\"line\"></div><div class=\"line\">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class=\"line\">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</div><div class=\"line\"></div><div class=\"line\">git br -d &lt;branch&gt;  # 删除某个分支</div><div class=\"line\">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div></pre></td></tr></table></figure>\n<p><code>分支合并和rebase</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</div><div class=\"line\">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</div><div class=\"line\"></div><div class=\"line\">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</div><div class=\"line\">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>\n<p><code>Git补丁管理(方便在多台机器上开发同步时用)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &gt; ../sync.patch         # 生成补丁</div><div class=\"line\">git apply ../sync.patch          # 打补丁</div><div class=\"line\">git apply --check ../sync.patch  # 测试补丁能否成功</div></pre></td></tr></table></figure>\n<p><code>Git暂存管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash                        # 暂存</div><div class=\"line\">git stash list                   # 列所有stash</div><div class=\"line\">git stash apply                  # 恢复暂存的内容</div><div class=\"line\">git stash drop                   # 删除暂存区</div><div class=\"line\">git stash clear</div></pre></td></tr></table></figure>\n<p><code>Git远程分支管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull                         # 抓取远程仓库所有分支更新并合并到本地</div><div class=\"line\">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class=\"line\">git fetch origin                 # 抓取远程仓库更新</div><div class=\"line\">git merge origin/master          # 将远程主分支合并到本地当前分支</div><div class=\"line\">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</div><div class=\"line\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</div><div class=\"line\"></div><div class=\"line\">git push                         # push所有分支</div><div class=\"line\">git push origin master           # 将本地主分支推到远程主分支</div><div class=\"line\">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class=\"line\">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</div><div class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</div><div class=\"line\">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div></pre></td></tr></table></figure>\n<p><code>Git远程仓库管理</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v                    # 查看远程服务器地址和仓库名称</div><div class=\"line\">git remote show origin           # 查看远程服务器仓库状态</div><div class=\"line\">git remote add origin git@github:stormzhang/demo.git         # 添加远程仓库地址</div><div class=\"line\">git remote set-url origin git@github.com:stormzhang/demo.git # 设置远程仓库地址(用于修改远程仓库地址</div></pre></td></tr></table></figure>\n<p><code>创建远程仓库</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</div><div class=\"line\">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</div><div class=\"line\"></div><div class=\"line\">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class=\"line\">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</div><div class=\"line\">git push -u origin master                                      # 客户端首次提交</div><div class=\"line\">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</div><div class=\"line\"></div><div class=\"line\">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</div></pre></td></tr></table></figure>\n<p><code>也可以命令设置跟踪远程库和本地库</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream master origin/master</div><div class=\"line\">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>"},{"title":"时间的朋友","date":"2017-02-08T13:39:18.000Z","_content":"> updated at 2017-02-10\n> pubulished at 2017-02-08\n\n- 小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系.\n- 巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方\n- 移动互联网的红利已经结束,流量已经被BAT瓜分干净\n- 什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代\n- 在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%.\n- 什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代.\n- 我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)\n- 你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)\n- 只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.\n- 两年前我们糊里糊涂的融了资，然后变成必须以上市为目的公司，……然后发现资本市场找你要的不是钱，也不是生意，他要的是两个字，叫做**增长**。就是你的钱要月挣越多才行，挣很多不行，后来发现他找你要的是不是增长，是**持续**的增长，增长的速度要越来越快，到后来我发现，不对，不对 他要的根本不是增长速度，而是**你的增长速度要超过预期**。老天爷，我现在不管有多好，他们都要求更好，比预期的还好，这是一个什么日子？\n- 我们从小就被灌输一种观念，等我有钱了，有关系了，有资源了，我就可以过的好。那天看二手房，我知道一个道理，无论你有多少钱，多少资源，有些人就有这个能力，仍然过不好这一生。（那些人指的是富人，但是过的并不体面，不讲卫生。）\n- 我们这一生想过的好，跟资源并没有多大关系，一切都是自我。","source":"_posts/friend-of-time.md","raw":"---\ntitle: 时间的朋友\ndate: 2017-02-08 21:39:18\ntags: 罗辑思维\ncategories: 读书笔记\n---\n> updated at 2017-02-10\n> pubulished at 2017-02-08\n\n- 小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系.\n- 巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方\n- 移动互联网的红利已经结束,流量已经被BAT瓜分干净\n- 什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代\n- 在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%.\n- 什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代.\n- 我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)\n- 你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)\n- 只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.\n- 两年前我们糊里糊涂的融了资，然后变成必须以上市为目的公司，……然后发现资本市场找你要的不是钱，也不是生意，他要的是两个字，叫做**增长**。就是你的钱要月挣越多才行，挣很多不行，后来发现他找你要的是不是增长，是**持续**的增长，增长的速度要越来越快，到后来我发现，不对，不对 他要的根本不是增长速度，而是**你的增长速度要超过预期**。老天爷，我现在不管有多好，他们都要求更好，比预期的还好，这是一个什么日子？\n- 我们从小就被灌输一种观念，等我有钱了，有关系了，有资源了，我就可以过的好。那天看二手房，我知道一个道理，无论你有多少钱，多少资源，有些人就有这个能力，仍然过不好这一生。（那些人指的是富人，但是过的并不体面，不讲卫生。）\n- 我们这一生想过的好，跟资源并没有多大关系，一切都是自我。","slug":"friend-of-time","published":1,"updated":"2017-02-10T06:52:15.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8xu0005qckik4bbe1bl","content":"<blockquote>\n<p>updated at 2017-02-10<br>pubulished at 2017-02-08</p>\n</blockquote>\n<ul>\n<li>小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系.</li>\n<li>巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方</li>\n<li>移动互联网的红利已经结束,流量已经被BAT瓜分干净</li>\n<li>什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代</li>\n<li>在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%.</li>\n<li>什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代.</li>\n<li>我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)</li>\n<li>你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)</li>\n<li>只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.</li>\n<li>两年前我们糊里糊涂的融了资，然后变成必须以上市为目的公司，……然后发现资本市场找你要的不是钱，也不是生意，他要的是两个字，叫做<strong>增长</strong>。就是你的钱要月挣越多才行，挣很多不行，后来发现他找你要的是不是增长，是<strong>持续</strong>的增长，增长的速度要越来越快，到后来我发现，不对，不对 他要的根本不是增长速度，而是<strong>你的增长速度要超过预期</strong>。老天爷，我现在不管有多好，他们都要求更好，比预期的还好，这是一个什么日子？</li>\n<li>我们从小就被灌输一种观念，等我有钱了，有关系了，有资源了，我就可以过的好。那天看二手房，我知道一个道理，无论你有多少钱，多少资源，有些人就有这个能力，仍然过不好这一生。（那些人指的是富人，但是过的并不体面，不讲卫生。）</li>\n<li>我们这一生想过的好，跟资源并没有多大关系，一切都是自我。</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>updated at 2017-02-10<br>pubulished at 2017-02-08</p>\n</blockquote>\n<ul>\n<li>小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系.</li>\n<li>巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方</li>\n<li>移动互联网的红利已经结束,流量已经被BAT瓜分干净</li>\n<li>什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代</li>\n<li>在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%.</li>\n<li>什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代.</li>\n<li>我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)</li>\n<li>你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)</li>\n<li>只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.</li>\n<li>两年前我们糊里糊涂的融了资，然后变成必须以上市为目的公司，……然后发现资本市场找你要的不是钱，也不是生意，他要的是两个字，叫做<strong>增长</strong>。就是你的钱要月挣越多才行，挣很多不行，后来发现他找你要的是不是增长，是<strong>持续</strong>的增长，增长的速度要越来越快，到后来我发现，不对，不对 他要的根本不是增长速度，而是<strong>你的增长速度要超过预期</strong>。老天爷，我现在不管有多好，他们都要求更好，比预期的还好，这是一个什么日子？</li>\n<li>我们从小就被灌输一种观念，等我有钱了，有关系了，有资源了，我就可以过的好。那天看二手房，我知道一个道理，无论你有多少钱，多少资源，有些人就有这个能力，仍然过不好这一生。（那些人指的是富人，但是过的并不体面，不讲卫生。）</li>\n<li>我们这一生想过的好，跟资源并没有多大关系，一切都是自我。</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-07T07:57:26.707Z","updated":"2017-02-08T01:50:51.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8xx0006qckitjf0kwmi","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"laravel数据库以及CURD","date":"2017-02-08T06:23:52.000Z","_content":"### db facade(原始查找)\n>使用facade就是使用原始的sql语句来查询修改数据库\n```\nDB::select('sql 语句')\nDB::insert('insert into student (name,age) values(?,?),['jeremy',22]')\nDB::update('sql 语句')\nDB::delete('sql 语句'\n```\n### 查询构造器\n>使用laravel操作数据库的必备技能\n\n#### 查询构造器简介及新增数据\n- larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句\n- 使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符\n\n\n```\n//插入新数组返回bool\nDB::table('tablename')->insert(['age'=>18,'name'=>'jeremy'])\n//插入新数据得到自增id\nDB::table('tablename')->insertGetId(['age'=>18,'name'=>'jeremy'])\n//一次插入多个数据数组\n DB::table('tablename')->insert([\n\t\t 'age'=>18,'name'=>'jeremy1'],\n\t\t 'age'=>19,'name'=>'jeremy2'],\n\t\t 'age'=>17,'name'=>'jeremy3'],\n\t\t 'age'=>16,'name'=>'jeremy4'],\n\t\t )\n```\n#### 更新数据\n```\nDB::table('tablename')\n\t->where('id',12)\n\t->update(['age'=>30])\n```\n#### 删除数据\n```\nDB::table('tablename')\n\t->where('id','>=',12)\n\t->delete()\n```\n#### 查询数据\n```\n//获得所有数据\nDB::table('tablename')->get();\n//返回第一条记录\nDB::table('tablename')\n->orderBy('id','desc')\n->first();\n//返回结果结果集中某个字段pluck\nDB::table('tablename')\n->orderBy('id','desc')\n->pluck('name');\n//返回结果结果集中制定的字段并使用某个键为下标\nDB::table('tablename')\n->orderBy('id','desc')\n->lists('name','id');\n\n//select查询\nDB::table('tablename')\n->select('id','name','age')\n->get();\n//chunk 每次查询n个数据并回调\nDB::table('tablename')->chunk(1000,function($res){\t\n\tif($res){\n\treturn false;\n\t}\n});\n\n```\n\n\n\n\n### Eloquent ORM(Object Relational Model )\n\n>操作laravel数据库最常用的方式\n\n - Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作\n - 每个数据表都有一个与之对应的'模型(Model)' 用于和数据表交互\n\n```php\n class Student extends Model{\n\t //模型与数据库表关联\n\tprotected $table='student';\n\t//指定id\n\tprotected $primaryKey='id';\n\t\n}\n```\n查询方法\n\n```php\n//返回所有集合对象\n$res = student::all();\n//返回一个集合对象\n$res = student::find(1001);\n//findOrFail查询不到抛出异常\n$res = student::findOrFail(1001);\n\n```\n`查询构造器的使用`\n\n```\n//查询所有\nStudent::get();\n//查询一条\nStudent::where('id','>','1001')\n->orderBy('id')\n->first();\n//查询n条\nStudent::where('id','>','1001')\n->orderBy('id')\n->chunk(2000,function($res){\n\tvar_dump($res)\n});\n```\n`增加数据`\n```\n//此处不允许批量赋值\nStudent::create(\n\t['name'=>'jeremy'],\n\t['age'=>12],\n\t['sex'=>1],\n)\n//在模型出加上允许批量赋值的字段名字\nprotected $fillable=['name','age']\n```\n```\n//没有该数据则新增此数据\nStudent::firstOrCreate()\n\n//没有该数据调用save()后新增此数据\nStudent::firstOrNew()->save();\n```\n`修改数据`\n```\n//第一种\n$student=Student::find(1020);\n$student->name='jeremy';\n$student->save();\n//第二种\nStudent::where('id',12)\n->update(['name'=>'jeremy']);\n```\n\n`删除数据`\n```\n//通过模型删除\n$student= Student::find(1021);\n$student->delete();\n//通过主键删除\nStudent::destroy(1020,1021);\n\n//通过条件删除\nStudent::where('id','>',1004)-delete();\n```\n\n`pluck`\n\n获取一列的值\n若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的\n数组：\n```\n\n$titles = DB::table('roles')->pluck('title');\nforeach ($titles as $title) {\necho $title;\n}\n```\n你也可以在返回的数组中指定自定义的键值字段：\n```\n\n$roles = DB::table('roles')->pluck('title', 'name');\nforeach ($roles as $name => $title) {\necho $title;\n}\n```\n","source":"_posts/laravel-not.md","raw":"---\ntitle: laravel数据库以及CURD\ndate: 2017-02-08 14:23:52\ncategories: 编程 \ntags: laravel\n---\n### db facade(原始查找)\n>使用facade就是使用原始的sql语句来查询修改数据库\n```\nDB::select('sql 语句')\nDB::insert('insert into student (name,age) values(?,?),['jeremy',22]')\nDB::update('sql 语句')\nDB::delete('sql 语句'\n```\n### 查询构造器\n>使用laravel操作数据库的必备技能\n\n#### 查询构造器简介及新增数据\n- larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句\n- 使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符\n\n\n```\n//插入新数组返回bool\nDB::table('tablename')->insert(['age'=>18,'name'=>'jeremy'])\n//插入新数据得到自增id\nDB::table('tablename')->insertGetId(['age'=>18,'name'=>'jeremy'])\n//一次插入多个数据数组\n DB::table('tablename')->insert([\n\t\t 'age'=>18,'name'=>'jeremy1'],\n\t\t 'age'=>19,'name'=>'jeremy2'],\n\t\t 'age'=>17,'name'=>'jeremy3'],\n\t\t 'age'=>16,'name'=>'jeremy4'],\n\t\t )\n```\n#### 更新数据\n```\nDB::table('tablename')\n\t->where('id',12)\n\t->update(['age'=>30])\n```\n#### 删除数据\n```\nDB::table('tablename')\n\t->where('id','>=',12)\n\t->delete()\n```\n#### 查询数据\n```\n//获得所有数据\nDB::table('tablename')->get();\n//返回第一条记录\nDB::table('tablename')\n->orderBy('id','desc')\n->first();\n//返回结果结果集中某个字段pluck\nDB::table('tablename')\n->orderBy('id','desc')\n->pluck('name');\n//返回结果结果集中制定的字段并使用某个键为下标\nDB::table('tablename')\n->orderBy('id','desc')\n->lists('name','id');\n\n//select查询\nDB::table('tablename')\n->select('id','name','age')\n->get();\n//chunk 每次查询n个数据并回调\nDB::table('tablename')->chunk(1000,function($res){\t\n\tif($res){\n\treturn false;\n\t}\n});\n\n```\n\n\n\n\n### Eloquent ORM(Object Relational Model )\n\n>操作laravel数据库最常用的方式\n\n - Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作\n - 每个数据表都有一个与之对应的'模型(Model)' 用于和数据表交互\n\n```php\n class Student extends Model{\n\t //模型与数据库表关联\n\tprotected $table='student';\n\t//指定id\n\tprotected $primaryKey='id';\n\t\n}\n```\n查询方法\n\n```php\n//返回所有集合对象\n$res = student::all();\n//返回一个集合对象\n$res = student::find(1001);\n//findOrFail查询不到抛出异常\n$res = student::findOrFail(1001);\n\n```\n`查询构造器的使用`\n\n```\n//查询所有\nStudent::get();\n//查询一条\nStudent::where('id','>','1001')\n->orderBy('id')\n->first();\n//查询n条\nStudent::where('id','>','1001')\n->orderBy('id')\n->chunk(2000,function($res){\n\tvar_dump($res)\n});\n```\n`增加数据`\n```\n//此处不允许批量赋值\nStudent::create(\n\t['name'=>'jeremy'],\n\t['age'=>12],\n\t['sex'=>1],\n)\n//在模型出加上允许批量赋值的字段名字\nprotected $fillable=['name','age']\n```\n```\n//没有该数据则新增此数据\nStudent::firstOrCreate()\n\n//没有该数据调用save()后新增此数据\nStudent::firstOrNew()->save();\n```\n`修改数据`\n```\n//第一种\n$student=Student::find(1020);\n$student->name='jeremy';\n$student->save();\n//第二种\nStudent::where('id',12)\n->update(['name'=>'jeremy']);\n```\n\n`删除数据`\n```\n//通过模型删除\n$student= Student::find(1021);\n$student->delete();\n//通过主键删除\nStudent::destroy(1020,1021);\n\n//通过条件删除\nStudent::where('id','>',1004)-delete();\n```\n\n`pluck`\n\n获取一列的值\n若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的\n数组：\n```\n\n$titles = DB::table('roles')->pluck('title');\nforeach ($titles as $title) {\necho $title;\n}\n```\n你也可以在返回的数组中指定自定义的键值字段：\n```\n\n$roles = DB::table('roles')->pluck('title', 'name');\nforeach ($roles as $name => $title) {\necho $title;\n}\n```\n","slug":"laravel-not","published":1,"updated":"2017-02-08T06:50:13.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8y00007qcki2wzfkikz","content":"<h3 id=\"db-facade-原始查找\"><a href=\"#db-facade-原始查找\" class=\"headerlink\" title=\"db facade(原始查找)\"></a>db facade(原始查找)</h3><blockquote>\n<p>使用facade就是使用原始的sql语句来查询修改数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::select(&apos;sql 语句&apos;)</div><div class=\"line\">DB::insert(&apos;insert into student (name,age) values(?,?),[&apos;jeremy&apos;,22]&apos;)</div><div class=\"line\">DB::update(&apos;sql 语句&apos;)</div><div class=\"line\">DB::delete(&apos;sql 语句&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"查询构造器\"><a href=\"#查询构造器\" class=\"headerlink\" title=\"查询构造器\"></a>查询构造器</h3><blockquote>\n<p>使用laravel操作数据库的必备技能</p>\n</blockquote>\n<h4 id=\"查询构造器简介及新增数据\"><a href=\"#查询构造器简介及新增数据\" class=\"headerlink\" title=\"查询构造器简介及新增数据\"></a>查询构造器简介及新增数据</h4><ul>\n<li>larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句</li>\n<li>使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//插入新数组返回bool</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;insert([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class=\"line\">//插入新数据得到自增id</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;insertGetId([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class=\"line\">//一次插入多个数据数组</div><div class=\"line\"> DB::table(&apos;tablename&apos;)-&gt;insert([</div><div class=\"line\">\t\t &apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy1&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;19,&apos;name&apos;=&gt;&apos;jeremy2&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;17,&apos;name&apos;=&gt;&apos;jeremy3&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;16,&apos;name&apos;=&gt;&apos;jeremy4&apos;],</div><div class=\"line\">\t\t )</div></pre></td></tr></table></figure>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">\t-&gt;where(&apos;id&apos;,12)</div><div class=\"line\">\t-&gt;update([&apos;age&apos;=&gt;30])</div></pre></td></tr></table></figure>\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">\t-&gt;where(&apos;id&apos;,&apos;&gt;=&apos;,12)</div><div class=\"line\">\t-&gt;delete()</div></pre></td></tr></table></figure>\n<h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获得所有数据</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;get();</div><div class=\"line\">//返回第一条记录</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;first();</div><div class=\"line\">//返回结果结果集中某个字段pluck</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;pluck(&apos;name&apos;);</div><div class=\"line\">//返回结果结果集中制定的字段并使用某个键为下标</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;lists(&apos;name&apos;,&apos;id&apos;);</div><div class=\"line\"></div><div class=\"line\">//select查询</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;select(&apos;id&apos;,&apos;name&apos;,&apos;age&apos;)</div><div class=\"line\">-&gt;get();</div><div class=\"line\">//chunk 每次查询n个数据并回调</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;chunk(1000,function($res)&#123;\t</div><div class=\"line\">\tif($res)&#123;</div><div class=\"line\">\treturn false;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Eloquent-ORM-Object-Relational-Model\"><a href=\"#Eloquent-ORM-Object-Relational-Model\" class=\"headerlink\" title=\"Eloquent ORM(Object Relational Model )\"></a>Eloquent ORM(Object Relational Model )</h3><blockquote>\n<p>操作laravel数据库最常用的方式</p>\n</blockquote>\n<ul>\n<li>Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作</li>\n<li>每个数据表都有一个与之对应的’模型(Model)’ 用于和数据表交互</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;</div><div class=\"line\">\t <span class=\"comment\">//模型与数据库表关联</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> $table=<span class=\"string\">'student'</span>;</div><div class=\"line\">\t<span class=\"comment\">//指定id</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> $primaryKey=<span class=\"string\">'id'</span>;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查询方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回所有集合对象</span></div><div class=\"line\">$res = student::all();</div><div class=\"line\"><span class=\"comment\">//返回一个集合对象</span></div><div class=\"line\">$res = student::find(<span class=\"number\">1001</span>);</div><div class=\"line\"><span class=\"comment\">//findOrFail查询不到抛出异常</span></div><div class=\"line\">$res = student::findOrFail(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure>\n<p><code>查询构造器的使用</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//查询所有</div><div class=\"line\">Student::get();</div><div class=\"line\">//查询一条</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;)</div><div class=\"line\">-&gt;first();</div><div class=\"line\">//查询n条</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;)</div><div class=\"line\">-&gt;chunk(2000,function($res)&#123;</div><div class=\"line\">\tvar_dump($res)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>增加数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//此处不允许批量赋值</div><div class=\"line\">Student::create(</div><div class=\"line\">\t[&apos;name&apos;=&gt;&apos;jeremy&apos;],</div><div class=\"line\">\t[&apos;age&apos;=&gt;12],</div><div class=\"line\">\t[&apos;sex&apos;=&gt;1],</div><div class=\"line\">)</div><div class=\"line\">//在模型出加上允许批量赋值的字段名字</div><div class=\"line\">protected $fillable=[&apos;name&apos;,&apos;age&apos;]</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//没有该数据则新增此数据</div><div class=\"line\">Student::firstOrCreate()</div><div class=\"line\"></div><div class=\"line\">//没有该数据调用save()后新增此数据</div><div class=\"line\">Student::firstOrNew()-&gt;save();</div></pre></td></tr></table></figure>\n<p><code>修改数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第一种</div><div class=\"line\">$student=Student::find(1020);</div><div class=\"line\">$student-&gt;name=&apos;jeremy&apos;;</div><div class=\"line\">$student-&gt;save();</div><div class=\"line\">//第二种</div><div class=\"line\">Student::where(&apos;id&apos;,12)</div><div class=\"line\">-&gt;update([&apos;name&apos;=&gt;&apos;jeremy&apos;]);</div></pre></td></tr></table></figure></p>\n<p><code>删除数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//通过模型删除</div><div class=\"line\">$student= Student::find(1021);</div><div class=\"line\">$student-&gt;delete();</div><div class=\"line\">//通过主键删除</div><div class=\"line\">Student::destroy(1020,1021);</div><div class=\"line\"></div><div class=\"line\">//通过条件删除</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,1004)-delete();</div></pre></td></tr></table></figure></p>\n<p><code>pluck</code></p>\n<p>获取一列的值<br>若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的<br>数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$titles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;);</div><div class=\"line\">foreach ($titles as $title) &#123;</div><div class=\"line\">echo $title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你也可以在返回的数组中指定自定义的键值字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$roles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;, &apos;name&apos;);</div><div class=\"line\">foreach ($roles as $name =&gt; $title) &#123;</div><div class=\"line\">echo $title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"db-facade-原始查找\"><a href=\"#db-facade-原始查找\" class=\"headerlink\" title=\"db facade(原始查找)\"></a>db facade(原始查找)</h3><blockquote>\n<p>使用facade就是使用原始的sql语句来查询修改数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::select(&apos;sql 语句&apos;)</div><div class=\"line\">DB::insert(&apos;insert into student (name,age) values(?,?),[&apos;jeremy&apos;,22]&apos;)</div><div class=\"line\">DB::update(&apos;sql 语句&apos;)</div><div class=\"line\">DB::delete(&apos;sql 语句&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"查询构造器\"><a href=\"#查询构造器\" class=\"headerlink\" title=\"查询构造器\"></a>查询构造器</h3><blockquote>\n<p>使用laravel操作数据库的必备技能</p>\n</blockquote>\n<h4 id=\"查询构造器简介及新增数据\"><a href=\"#查询构造器简介及新增数据\" class=\"headerlink\" title=\"查询构造器简介及新增数据\"></a>查询构造器简介及新增数据</h4><ul>\n<li>larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句</li>\n<li>使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//插入新数组返回bool</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;insert([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class=\"line\">//插入新数据得到自增id</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;insertGetId([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class=\"line\">//一次插入多个数据数组</div><div class=\"line\"> DB::table(&apos;tablename&apos;)-&gt;insert([</div><div class=\"line\">\t\t &apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy1&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;19,&apos;name&apos;=&gt;&apos;jeremy2&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;17,&apos;name&apos;=&gt;&apos;jeremy3&apos;],</div><div class=\"line\">\t\t &apos;age&apos;=&gt;16,&apos;name&apos;=&gt;&apos;jeremy4&apos;],</div><div class=\"line\">\t\t )</div></pre></td></tr></table></figure>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">\t-&gt;where(&apos;id&apos;,12)</div><div class=\"line\">\t-&gt;update([&apos;age&apos;=&gt;30])</div></pre></td></tr></table></figure>\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">\t-&gt;where(&apos;id&apos;,&apos;&gt;=&apos;,12)</div><div class=\"line\">\t-&gt;delete()</div></pre></td></tr></table></figure>\n<h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获得所有数据</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;get();</div><div class=\"line\">//返回第一条记录</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;first();</div><div class=\"line\">//返回结果结果集中某个字段pluck</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;pluck(&apos;name&apos;);</div><div class=\"line\">//返回结果结果集中制定的字段并使用某个键为下标</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class=\"line\">-&gt;lists(&apos;name&apos;,&apos;id&apos;);</div><div class=\"line\"></div><div class=\"line\">//select查询</div><div class=\"line\">DB::table(&apos;tablename&apos;)</div><div class=\"line\">-&gt;select(&apos;id&apos;,&apos;name&apos;,&apos;age&apos;)</div><div class=\"line\">-&gt;get();</div><div class=\"line\">//chunk 每次查询n个数据并回调</div><div class=\"line\">DB::table(&apos;tablename&apos;)-&gt;chunk(1000,function($res)&#123;\t</div><div class=\"line\">\tif($res)&#123;</div><div class=\"line\">\treturn false;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Eloquent-ORM-Object-Relational-Model\"><a href=\"#Eloquent-ORM-Object-Relational-Model\" class=\"headerlink\" title=\"Eloquent ORM(Object Relational Model )\"></a>Eloquent ORM(Object Relational Model )</h3><blockquote>\n<p>操作laravel数据库最常用的方式</p>\n</blockquote>\n<ul>\n<li>Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作</li>\n<li>每个数据表都有一个与之对应的’模型(Model)’ 用于和数据表交互</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;</div><div class=\"line\">\t <span class=\"comment\">//模型与数据库表关联</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> $table=<span class=\"string\">'student'</span>;</div><div class=\"line\">\t<span class=\"comment\">//指定id</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> $primaryKey=<span class=\"string\">'id'</span>;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查询方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回所有集合对象</span></div><div class=\"line\">$res = student::all();</div><div class=\"line\"><span class=\"comment\">//返回一个集合对象</span></div><div class=\"line\">$res = student::find(<span class=\"number\">1001</span>);</div><div class=\"line\"><span class=\"comment\">//findOrFail查询不到抛出异常</span></div><div class=\"line\">$res = student::findOrFail(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure>\n<p><code>查询构造器的使用</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//查询所有</div><div class=\"line\">Student::get();</div><div class=\"line\">//查询一条</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;)</div><div class=\"line\">-&gt;first();</div><div class=\"line\">//查询n条</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class=\"line\">-&gt;orderBy(&apos;id&apos;)</div><div class=\"line\">-&gt;chunk(2000,function($res)&#123;</div><div class=\"line\">\tvar_dump($res)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>增加数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//此处不允许批量赋值</div><div class=\"line\">Student::create(</div><div class=\"line\">\t[&apos;name&apos;=&gt;&apos;jeremy&apos;],</div><div class=\"line\">\t[&apos;age&apos;=&gt;12],</div><div class=\"line\">\t[&apos;sex&apos;=&gt;1],</div><div class=\"line\">)</div><div class=\"line\">//在模型出加上允许批量赋值的字段名字</div><div class=\"line\">protected $fillable=[&apos;name&apos;,&apos;age&apos;]</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//没有该数据则新增此数据</div><div class=\"line\">Student::firstOrCreate()</div><div class=\"line\"></div><div class=\"line\">//没有该数据调用save()后新增此数据</div><div class=\"line\">Student::firstOrNew()-&gt;save();</div></pre></td></tr></table></figure>\n<p><code>修改数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第一种</div><div class=\"line\">$student=Student::find(1020);</div><div class=\"line\">$student-&gt;name=&apos;jeremy&apos;;</div><div class=\"line\">$student-&gt;save();</div><div class=\"line\">//第二种</div><div class=\"line\">Student::where(&apos;id&apos;,12)</div><div class=\"line\">-&gt;update([&apos;name&apos;=&gt;&apos;jeremy&apos;]);</div></pre></td></tr></table></figure></p>\n<p><code>删除数据</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//通过模型删除</div><div class=\"line\">$student= Student::find(1021);</div><div class=\"line\">$student-&gt;delete();</div><div class=\"line\">//通过主键删除</div><div class=\"line\">Student::destroy(1020,1021);</div><div class=\"line\"></div><div class=\"line\">//通过条件删除</div><div class=\"line\">Student::where(&apos;id&apos;,&apos;&gt;&apos;,1004)-delete();</div></pre></td></tr></table></figure></p>\n<p><code>pluck</code></p>\n<p>获取一列的值<br>若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的<br>数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$titles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;);</div><div class=\"line\">foreach ($titles as $title) &#123;</div><div class=\"line\">echo $title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你也可以在返回的数组中指定自定义的键值字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$roles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;, &apos;name&apos;);</div><div class=\"line\">foreach ($roles as $name =&gt; $title) &#123;</div><div class=\"line\">echo $title;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"laravel笔记之laravel 安装和数据迁移填充","date":"2017-02-10T08:58:44.000Z","_content":"\n> 本教程示例代码见：https://github.com/johnlui/Learn-Laravel-5\n\n在任何地方卡住，最快的办法就是去看示例代码。\n\n### 开始学习\n\n#### 1.安装\n\n许多人被拦在了学习 Laravel 的第一步：安装。并不是因为安装有多复杂，而是因为【众所周知的原因】。在此我推荐一个 composer 全量中国镜像：http://pkg.phpcomposer.com/ 。启用 Composer 镜像服务作为本教程的第一项小作业请自行完成哦。\n\n镜像配置完成后，在终端（Terminal 或 CMD）里切换到你想要放置该网站的目录下（如 C:\\wwwroot、/Library/WebServer/Documents/、/var/www/html、/etc/nginx/html 等），运行命令：\n\n```\ncomposer create-project laravel/laravel learnlaravel5 5.2.31\n\n```\n然后，稍等片刻，当前目录下就会出现一个叫 learnlaravel5 的文件夹，安装完成啦~\n\n#### 2.运行\n\n为了尽可能地减缓学习曲线，推荐宝宝们使用 PHP 内置 web 服务器驱动我们的网站。运行以下命令：\n\n```\ncd learnlaravel5/public\nphp -S 0.0.0.0:1024\n\n```\n\n这时候访问 http://127.0.0.1:1024 就是这个样子的：\n\n![laravel5](https://camo.githubusercontent.com/813c1698e040f3b29cd92f763e6ce1e2dd29c03f/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323831303139323130342e6a7067)\n\n我在本地 hosts 中绑定了 fuck.io 到 127.0.0.1，所以截图中我的域名是 fuck.io 而不是 127.0.0.1，其实他们是完全等价的。\n\n这时候你可能要问了：为什么本宝宝的页面是一片空白？请使用开发者工具查看网络请求，只要是 200 状态就说明运行成功了，空白是因为这个页面引用了 Google Fonts，你懂的~\n\n至于为什么选择 1024 端口？因为他是 *UNIX 系统动态端口的开始，是我们不需要 root 权限就可以随意监听的数值最小的端口。\n\n另外，建议不熟悉 PHP 运行环境搭建的宝宝们不要轻易尝试使用 Apache 或 Nginx 驱动 Laravel，特别是在开启了 SELinux 的 Linux 系统上跑。关于 Laravel 在 Linux 上部署的大坑，本宝宝可能要单写一篇长文分享给宝宝们。\n\n#### 3. 体验牛逼闪闪的 Auth 系统\n\nLaravel 利用 PHP5.4 的新特性 trait 内置了非常完善好用的简单用户登录注册功能，适合一些不需要复杂用户权限管理的系统，例如公司内部用的简单管理系统。\n\n激活这个功能非常容易，运行以下命令：\n\n```\nphp artisan make:auth\n\n```\n\n访问 http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：\n![login](https://camo.githubusercontent.com/1c989f7363771f11d916c5112066f3839b3a88aa/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323936353739343437372e6a7067)\n\n4. 连接数据库\n\n接下来我们要连接数据库了，请自行准备好 MySQL 服务哦。\n\n##### a. 修改配置\n\n不出意外的话，learnlaravel5 目录下已经有了一个 .env 文件，如果没有，可以复制一份 .env.example 文件重命名成 .env，修改下面几行的值：\n\n```\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel5\nDB_USERNAME=root\nDB_PASSWORD=root\n\n```\n推荐新建一个名为 laravel5 的数据库，并且使用 root 账户直接操作，降低学习数据库的成本。\n\n数据库配置好之后，在登录界面填写任意邮箱和密码，点击 Login，你应该会得到以下画面：\n![error](https://camo.githubusercontent.com/8abbf525301bd53ec10368258e38e69b0174bd42/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032303236323138312e6a7067)\n\n它说 users 表不存在呀，接下来我们将见识 Laravel 另外一个实用特性。\n\n##### b. 进行数据库迁移（migration）\n\n运行命令：\n\n```\nphp artisan migrate\n\n```\n我们得到了如下结果：\n\n![result](https://camo.githubusercontent.com/2e3c07b19fca3a3be7eb994beccbf2e44d1e3671/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032323136393039342e6a7067)\n\n数据库迁移成功！赶快打开 http://fuck.io:1024/home 注册一个用户试试吧~\n\n下图是本宝宝注册了一个 username 为 1 用户：\n\n![user1](http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14623689497675.jpg)\n\n##### c. migration 是啥？\n\n打开 `learnlaravel5/database/migrations/2014_10_12_000000_create_users_table.php `文件，你肯定能一眼看出它的作用：用 PHP 描述数据库构造，并且使用命令行一次性部署所有数据库结构。\n\n#### 5. 使用 Laravel 的“葵花宝典”：Eloquent\n\nEloquent 是 Laravel 的 ORM，是 Laravel 系统中最强大的地方，没有之一。当初 Laravel 作者在开发第一版的时候花了整整三分之一的时间才搞出来 Eloquent。当然，“欲练此功，必先自宫”，Eloquent 也是 Laravel 中最慢的地方，迄今无法解决。（路由、自动载入、配置分散、视图引发的性能问题都通过缓存几乎彻底解决了）\n\n当然，我们还是要承袭第一版教程中对 Eloquent ORM 的描述：鹅妹子英！\n\n \n\n##### a. Eloquent 是什么\n\n\nEloquent 是 Laravel 内置的 ORM 系统，我们的 Model 类将继承自 Eloquent 提供的 Model 类，然后，就天生具备了数十个异常强大的函数，从此想干啥事儿都是一行代码就搞定。\n\n##### b. 怎么用？\n\n我们使用 Artisan 工具新建 Model 类及其附属的 Migration 和 Seeder（数据填充）类。\n\n运行以下命令：\n\n```\nphp artisan make:model Article\n\n```\n去看看你的 app 目录，下面是不是多了一个 Article.php 文件？那就是 Artisan 帮我们生成的 Model 文件：\n\n```\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    //\n}\n\n```\n如此简洁有力的代码，隐藏了背后极高的难度和巨大的复杂度，让我们闭上眼睛，静静地感受 Laravel 的优雅吧 (～￣▽￣)～\n\n### 6. 使用 Migration 和 Seeder\n\n接下来我们生成对应 Article 这个 Model 的 Migration 和 Seeder。\n\n##### a. 使用 artisan 生成 Migration\n\n在 learnlaravel5 目录下运行命令：\n\n```\nphp artisan make:migration create_article_table\n\n```\n成功之后打开 `learnlaravel5/database/migrations`，你会发现有一个名为 2*****_create_article_table 的文件被创建了。我们修改他的 up 函数为：\n\n\n```\npublic function up()\n{\n    Schema::create('articles', function(Blueprint $table)\n    {\n        $table->increments('id');\n        $table->string('title');\n        $table->text('body')->nullable();\n        $table->integer('user_id');\n        $table->timestamps();\n    });\n}\n\n```\n这几行代码描述的是 Article 对应的数据库中那张表的结构。Laravel 默认 Model 对应的表名是这个英文单词的复数形式，在这里，就是 articles。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：\n\n```\nphp artisan migrate\n\n```\n执行成功后，articles 表已经出现在数据库里了：\n\n![article](https://camo.githubusercontent.com/a7675080d45339266815b2802e11d685f97c777a/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373137313131323931372e6a7067)\n\n\n##### b. 使用 artisan 生成 Seeder\n\nSeeder 是我们接触到的一个新概念，字面意思为播种机。Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。\n\n运行以下命令创建 Seeder 文件：\n\n```\nphp artisan make:seeder ArticleSeeder\n\n```\n我们会发现 learnlaravel5/database/seeds 里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：\n\n```\npublic function run()\n{\n    DB::table('articles')->delete();\n\n    for ($i=0; $i < 10; $i++) {\n        \\App\\Article::create([\n            'title'   => 'Title '.$i,\n            'body'    => 'Body '.$i,\n            'user_id' => 1,\n        ]);\n    }\n}\n\n```\n\n接下来我们把 ArticleSeeder 注册到系统内。修改 `learnlaravel5/database/seeds/DatabaseSeeder.php `中的 run 函数为：\n\n```\npublic function run()\n{\n    $this->call(ArticleSeeder::class);\n}\n\n```\n由于 database 目录没有像 app 目录那样被 composer 注册为 psr-4 自动加载，采用的是 psr-0 classmap 方式，所以我们还需要运行以下命令把` ArticleSeeder.php `加入自动加载系统，避免找不到类的错误：\n\n```\ncomposer dump-autoload\n\n```\n然后执行 seed：\n\n```\nphp artisan db:seed\n\n```\n你应该得到如下结果：\n![seed](https://camo.githubusercontent.com/629b71dcd42b94825e9075b5eaada4758b083dbd/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373330353231313336362e6a7067)\n这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据：\n\n![data](http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14627305849059.jpg)\n\n\n#### 原文：https://github.com/johnlui/Learn-Laravel-5/issues/4\n","source":"_posts/laravel笔记一-laravel-安装和数据迁移填充.md","raw":"---\ntitle: laravel笔记之laravel 安装和数据迁移填充\ndate: 2017-02-10 16:58:44\ntags: laravel\ncategories: 编程\n---\n\n> 本教程示例代码见：https://github.com/johnlui/Learn-Laravel-5\n\n在任何地方卡住，最快的办法就是去看示例代码。\n\n### 开始学习\n\n#### 1.安装\n\n许多人被拦在了学习 Laravel 的第一步：安装。并不是因为安装有多复杂，而是因为【众所周知的原因】。在此我推荐一个 composer 全量中国镜像：http://pkg.phpcomposer.com/ 。启用 Composer 镜像服务作为本教程的第一项小作业请自行完成哦。\n\n镜像配置完成后，在终端（Terminal 或 CMD）里切换到你想要放置该网站的目录下（如 C:\\wwwroot、/Library/WebServer/Documents/、/var/www/html、/etc/nginx/html 等），运行命令：\n\n```\ncomposer create-project laravel/laravel learnlaravel5 5.2.31\n\n```\n然后，稍等片刻，当前目录下就会出现一个叫 learnlaravel5 的文件夹，安装完成啦~\n\n#### 2.运行\n\n为了尽可能地减缓学习曲线，推荐宝宝们使用 PHP 内置 web 服务器驱动我们的网站。运行以下命令：\n\n```\ncd learnlaravel5/public\nphp -S 0.0.0.0:1024\n\n```\n\n这时候访问 http://127.0.0.1:1024 就是这个样子的：\n\n![laravel5](https://camo.githubusercontent.com/813c1698e040f3b29cd92f763e6ce1e2dd29c03f/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323831303139323130342e6a7067)\n\n我在本地 hosts 中绑定了 fuck.io 到 127.0.0.1，所以截图中我的域名是 fuck.io 而不是 127.0.0.1，其实他们是完全等价的。\n\n这时候你可能要问了：为什么本宝宝的页面是一片空白？请使用开发者工具查看网络请求，只要是 200 状态就说明运行成功了，空白是因为这个页面引用了 Google Fonts，你懂的~\n\n至于为什么选择 1024 端口？因为他是 *UNIX 系统动态端口的开始，是我们不需要 root 权限就可以随意监听的数值最小的端口。\n\n另外，建议不熟悉 PHP 运行环境搭建的宝宝们不要轻易尝试使用 Apache 或 Nginx 驱动 Laravel，特别是在开启了 SELinux 的 Linux 系统上跑。关于 Laravel 在 Linux 上部署的大坑，本宝宝可能要单写一篇长文分享给宝宝们。\n\n#### 3. 体验牛逼闪闪的 Auth 系统\n\nLaravel 利用 PHP5.4 的新特性 trait 内置了非常完善好用的简单用户登录注册功能，适合一些不需要复杂用户权限管理的系统，例如公司内部用的简单管理系统。\n\n激活这个功能非常容易，运行以下命令：\n\n```\nphp artisan make:auth\n\n```\n\n访问 http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：\n![login](https://camo.githubusercontent.com/1c989f7363771f11d916c5112066f3839b3a88aa/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323936353739343437372e6a7067)\n\n4. 连接数据库\n\n接下来我们要连接数据库了，请自行准备好 MySQL 服务哦。\n\n##### a. 修改配置\n\n不出意外的话，learnlaravel5 目录下已经有了一个 .env 文件，如果没有，可以复制一份 .env.example 文件重命名成 .env，修改下面几行的值：\n\n```\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel5\nDB_USERNAME=root\nDB_PASSWORD=root\n\n```\n推荐新建一个名为 laravel5 的数据库，并且使用 root 账户直接操作，降低学习数据库的成本。\n\n数据库配置好之后，在登录界面填写任意邮箱和密码，点击 Login，你应该会得到以下画面：\n![error](https://camo.githubusercontent.com/8abbf525301bd53ec10368258e38e69b0174bd42/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032303236323138312e6a7067)\n\n它说 users 表不存在呀，接下来我们将见识 Laravel 另外一个实用特性。\n\n##### b. 进行数据库迁移（migration）\n\n运行命令：\n\n```\nphp artisan migrate\n\n```\n我们得到了如下结果：\n\n![result](https://camo.githubusercontent.com/2e3c07b19fca3a3be7eb994beccbf2e44d1e3671/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032323136393039342e6a7067)\n\n数据库迁移成功！赶快打开 http://fuck.io:1024/home 注册一个用户试试吧~\n\n下图是本宝宝注册了一个 username 为 1 用户：\n\n![user1](http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14623689497675.jpg)\n\n##### c. migration 是啥？\n\n打开 `learnlaravel5/database/migrations/2014_10_12_000000_create_users_table.php `文件，你肯定能一眼看出它的作用：用 PHP 描述数据库构造，并且使用命令行一次性部署所有数据库结构。\n\n#### 5. 使用 Laravel 的“葵花宝典”：Eloquent\n\nEloquent 是 Laravel 的 ORM，是 Laravel 系统中最强大的地方，没有之一。当初 Laravel 作者在开发第一版的时候花了整整三分之一的时间才搞出来 Eloquent。当然，“欲练此功，必先自宫”，Eloquent 也是 Laravel 中最慢的地方，迄今无法解决。（路由、自动载入、配置分散、视图引发的性能问题都通过缓存几乎彻底解决了）\n\n当然，我们还是要承袭第一版教程中对 Eloquent ORM 的描述：鹅妹子英！\n\n \n\n##### a. Eloquent 是什么\n\n\nEloquent 是 Laravel 内置的 ORM 系统，我们的 Model 类将继承自 Eloquent 提供的 Model 类，然后，就天生具备了数十个异常强大的函数，从此想干啥事儿都是一行代码就搞定。\n\n##### b. 怎么用？\n\n我们使用 Artisan 工具新建 Model 类及其附属的 Migration 和 Seeder（数据填充）类。\n\n运行以下命令：\n\n```\nphp artisan make:model Article\n\n```\n去看看你的 app 目录，下面是不是多了一个 Article.php 文件？那就是 Artisan 帮我们生成的 Model 文件：\n\n```\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    //\n}\n\n```\n如此简洁有力的代码，隐藏了背后极高的难度和巨大的复杂度，让我们闭上眼睛，静静地感受 Laravel 的优雅吧 (～￣▽￣)～\n\n### 6. 使用 Migration 和 Seeder\n\n接下来我们生成对应 Article 这个 Model 的 Migration 和 Seeder。\n\n##### a. 使用 artisan 生成 Migration\n\n在 learnlaravel5 目录下运行命令：\n\n```\nphp artisan make:migration create_article_table\n\n```\n成功之后打开 `learnlaravel5/database/migrations`，你会发现有一个名为 2*****_create_article_table 的文件被创建了。我们修改他的 up 函数为：\n\n\n```\npublic function up()\n{\n    Schema::create('articles', function(Blueprint $table)\n    {\n        $table->increments('id');\n        $table->string('title');\n        $table->text('body')->nullable();\n        $table->integer('user_id');\n        $table->timestamps();\n    });\n}\n\n```\n这几行代码描述的是 Article 对应的数据库中那张表的结构。Laravel 默认 Model 对应的表名是这个英文单词的复数形式，在这里，就是 articles。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：\n\n```\nphp artisan migrate\n\n```\n执行成功后，articles 表已经出现在数据库里了：\n\n![article](https://camo.githubusercontent.com/a7675080d45339266815b2802e11d685f97c777a/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373137313131323931372e6a7067)\n\n\n##### b. 使用 artisan 生成 Seeder\n\nSeeder 是我们接触到的一个新概念，字面意思为播种机。Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。\n\n运行以下命令创建 Seeder 文件：\n\n```\nphp artisan make:seeder ArticleSeeder\n\n```\n我们会发现 learnlaravel5/database/seeds 里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：\n\n```\npublic function run()\n{\n    DB::table('articles')->delete();\n\n    for ($i=0; $i < 10; $i++) {\n        \\App\\Article::create([\n            'title'   => 'Title '.$i,\n            'body'    => 'Body '.$i,\n            'user_id' => 1,\n        ]);\n    }\n}\n\n```\n\n接下来我们把 ArticleSeeder 注册到系统内。修改 `learnlaravel5/database/seeds/DatabaseSeeder.php `中的 run 函数为：\n\n```\npublic function run()\n{\n    $this->call(ArticleSeeder::class);\n}\n\n```\n由于 database 目录没有像 app 目录那样被 composer 注册为 psr-4 自动加载，采用的是 psr-0 classmap 方式，所以我们还需要运行以下命令把` ArticleSeeder.php `加入自动加载系统，避免找不到类的错误：\n\n```\ncomposer dump-autoload\n\n```\n然后执行 seed：\n\n```\nphp artisan db:seed\n\n```\n你应该得到如下结果：\n![seed](https://camo.githubusercontent.com/629b71dcd42b94825e9075b5eaada4758b083dbd/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373330353231313336362e6a7067)\n这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据：\n\n![data](http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14627305849059.jpg)\n\n\n#### 原文：https://github.com/johnlui/Learn-Laravel-5/issues/4\n","slug":"laravel笔记一-laravel-安装和数据迁移填充","published":1,"updated":"2017-02-10T09:06:43.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8y5000bqckitxyqf1zi","content":"<blockquote>\n<p>本教程示例代码见：<a href=\"https://github.com/johnlui/Learn-Laravel-5\" target=\"_blank\" rel=\"external\">https://github.com/johnlui/Learn-Laravel-5</a></p>\n</blockquote>\n<p>在任何地方卡住，最快的办法就是去看示例代码。</p>\n<h3 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h3><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><p>许多人被拦在了学习 Laravel 的第一步：安装。并不是因为安装有多复杂，而是因为【众所周知的原因】。在此我推荐一个 composer 全量中国镜像：<a href=\"http://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"external\">http://pkg.phpcomposer.com/</a> 。启用 Composer 镜像服务作为本教程的第一项小作业请自行完成哦。</p>\n<p>镜像配置完成后，在终端（Terminal 或 CMD）里切换到你想要放置该网站的目录下（如 C:\\wwwroot、/Library/WebServer/Documents/、/var/www/html、/etc/nginx/html 等），运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project laravel/laravel learnlaravel5 5.2.31</div></pre></td></tr></table></figure>\n<p>然后，稍等片刻，当前目录下就会出现一个叫 learnlaravel5 的文件夹，安装完成啦~</p>\n<h4 id=\"2-运行\"><a href=\"#2-运行\" class=\"headerlink\" title=\"2.运行\"></a>2.运行</h4><p>为了尽可能地减缓学习曲线，推荐宝宝们使用 PHP 内置 web 服务器驱动我们的网站。运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd learnlaravel5/public</div><div class=\"line\">php -S 0.0.0.0:1024</div></pre></td></tr></table></figure>\n<p>这时候访问 <a href=\"http://127.0.0.1:1024\" target=\"_blank\" rel=\"external\">http://127.0.0.1:1024</a> 就是这个样子的：</p>\n<p><img src=\"https://camo.githubusercontent.com/813c1698e040f3b29cd92f763e6ce1e2dd29c03f/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323831303139323130342e6a7067\" alt=\"laravel5\"></p>\n<p>我在本地 hosts 中绑定了 fuck.io 到 127.0.0.1，所以截图中我的域名是 fuck.io 而不是 127.0.0.1，其实他们是完全等价的。</p>\n<p>这时候你可能要问了：为什么本宝宝的页面是一片空白？请使用开发者工具查看网络请求，只要是 200 状态就说明运行成功了，空白是因为这个页面引用了 Google Fonts，你懂的~</p>\n<p>至于为什么选择 1024 端口？因为他是 *UNIX 系统动态端口的开始，是我们不需要 root 权限就可以随意监听的数值最小的端口。</p>\n<p>另外，建议不熟悉 PHP 运行环境搭建的宝宝们不要轻易尝试使用 Apache 或 Nginx 驱动 Laravel，特别是在开启了 SELinux 的 Linux 系统上跑。关于 Laravel 在 Linux 上部署的大坑，本宝宝可能要单写一篇长文分享给宝宝们。</p>\n<h4 id=\"3-体验牛逼闪闪的-Auth-系统\"><a href=\"#3-体验牛逼闪闪的-Auth-系统\" class=\"headerlink\" title=\"3. 体验牛逼闪闪的 Auth 系统\"></a>3. 体验牛逼闪闪的 Auth 系统</h4><p>Laravel 利用 PHP5.4 的新特性 trait 内置了非常完善好用的简单用户登录注册功能，适合一些不需要复杂用户权限管理的系统，例如公司内部用的简单管理系统。</p>\n<p>激活这个功能非常容易，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:auth</div></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：\" target=\"_blank\" rel=\"external\">http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：</a><br><img src=\"https://camo.githubusercontent.com/1c989f7363771f11d916c5112066f3839b3a88aa/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323936353739343437372e6a7067\" alt=\"login\"></p>\n<ol>\n<li>连接数据库</li>\n</ol>\n<p>接下来我们要连接数据库了，请自行准备好 MySQL 服务哦。</p>\n<h5 id=\"a-修改配置\"><a href=\"#a-修改配置\" class=\"headerlink\" title=\"a. 修改配置\"></a>a. 修改配置</h5><p>不出意外的话，learnlaravel5 目录下已经有了一个 .env 文件，如果没有，可以复制一份 .env.example 文件重命名成 .env，修改下面几行的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB_HOST=127.0.0.1</div><div class=\"line\">DB_PORT=3306</div><div class=\"line\">DB_DATABASE=laravel5</div><div class=\"line\">DB_USERNAME=root</div><div class=\"line\">DB_PASSWORD=root</div></pre></td></tr></table></figure>\n<p>推荐新建一个名为 laravel5 的数据库，并且使用 root 账户直接操作，降低学习数据库的成本。</p>\n<p>数据库配置好之后，在登录界面填写任意邮箱和密码，点击 Login，你应该会得到以下画面：<br><img src=\"https://camo.githubusercontent.com/8abbf525301bd53ec10368258e38e69b0174bd42/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032303236323138312e6a7067\" alt=\"error\"></p>\n<p>它说 users 表不存在呀，接下来我们将见识 Laravel 另外一个实用特性。</p>\n<h5 id=\"b-进行数据库迁移（migration）\"><a href=\"#b-进行数据库迁移（migration）\" class=\"headerlink\" title=\"b. 进行数据库迁移（migration）\"></a>b. 进行数据库迁移（migration）</h5><p>运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<p>我们得到了如下结果：</p>\n<p><img src=\"https://camo.githubusercontent.com/2e3c07b19fca3a3be7eb994beccbf2e44d1e3671/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032323136393039342e6a7067\" alt=\"result\"></p>\n<p>数据库迁移成功！赶快打开 <a href=\"http://fuck.io:1024/home\" target=\"_blank\" rel=\"external\">http://fuck.io:1024/home</a> 注册一个用户试试吧~</p>\n<p>下图是本宝宝注册了一个 username 为 1 用户：</p>\n<p><img src=\"http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14623689497675.jpg\" alt=\"user1\"></p>\n<h5 id=\"c-migration-是啥？\"><a href=\"#c-migration-是啥？\" class=\"headerlink\" title=\"c. migration 是啥？\"></a>c. migration 是啥？</h5><p>打开 <code>learnlaravel5/database/migrations/2014_10_12_000000_create_users_table.php</code>文件，你肯定能一眼看出它的作用：用 PHP 描述数据库构造，并且使用命令行一次性部署所有数据库结构。</p>\n<h4 id=\"5-使用-Laravel-的“葵花宝典”：Eloquent\"><a href=\"#5-使用-Laravel-的“葵花宝典”：Eloquent\" class=\"headerlink\" title=\"5. 使用 Laravel 的“葵花宝典”：Eloquent\"></a>5. 使用 Laravel 的“葵花宝典”：Eloquent</h4><p>Eloquent 是 Laravel 的 ORM，是 Laravel 系统中最强大的地方，没有之一。当初 Laravel 作者在开发第一版的时候花了整整三分之一的时间才搞出来 Eloquent。当然，“欲练此功，必先自宫”，Eloquent 也是 Laravel 中最慢的地方，迄今无法解决。（路由、自动载入、配置分散、视图引发的性能问题都通过缓存几乎彻底解决了）</p>\n<p>当然，我们还是要承袭第一版教程中对 Eloquent ORM 的描述：鹅妹子英！</p>\n<h5 id=\"a-Eloquent-是什么\"><a href=\"#a-Eloquent-是什么\" class=\"headerlink\" title=\"a. Eloquent 是什么\"></a>a. Eloquent 是什么</h5><p>Eloquent 是 Laravel 内置的 ORM 系统，我们的 Model 类将继承自 Eloquent 提供的 Model 类，然后，就天生具备了数十个异常强大的函数，从此想干啥事儿都是一行代码就搞定。</p>\n<h5 id=\"b-怎么用？\"><a href=\"#b-怎么用？\" class=\"headerlink\" title=\"b. 怎么用？\"></a>b. 怎么用？</h5><p>我们使用 Artisan 工具新建 Model 类及其附属的 Migration 和 Seeder（数据填充）类。</p>\n<p>运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:model Article</div></pre></td></tr></table></figure>\n<p>去看看你的 app 目录，下面是不是多了一个 Article.php 文件？那就是 Artisan 帮我们生成的 Model 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Database\\Eloquent\\Model;</div><div class=\"line\"></div><div class=\"line\">class Article extends Model</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此简洁有力的代码，隐藏了背后极高的难度和巨大的复杂度，让我们闭上眼睛，静静地感受 Laravel 的优雅吧 (～￣▽￣)～</p>\n<h3 id=\"6-使用-Migration-和-Seeder\"><a href=\"#6-使用-Migration-和-Seeder\" class=\"headerlink\" title=\"6. 使用 Migration 和 Seeder\"></a>6. 使用 Migration 和 Seeder</h3><p>接下来我们生成对应 Article 这个 Model 的 Migration 和 Seeder。</p>\n<h5 id=\"a-使用-artisan-生成-Migration\"><a href=\"#a-使用-artisan-生成-Migration\" class=\"headerlink\" title=\"a. 使用 artisan 生成 Migration\"></a>a. 使用 artisan 生成 Migration</h5><p>在 learnlaravel5 目录下运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:migration create_article_table</div></pre></td></tr></table></figure>\n<p>成功之后打开 <code>learnlaravel5/database/migrations</code>，你会发现有一个名为 2<strong>*</strong>_create_article_table 的文件被创建了。我们修改他的 up 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function up()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::create(&apos;articles&apos;, function(Blueprint $table)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">        $table-&gt;string(&apos;title&apos;);</div><div class=\"line\">        $table-&gt;text(&apos;body&apos;)-&gt;nullable();</div><div class=\"line\">        $table-&gt;integer(&apos;user_id&apos;);</div><div class=\"line\">        $table-&gt;timestamps();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这几行代码描述的是 Article 对应的数据库中那张表的结构。Laravel 默认 Model 对应的表名是这个英文单词的复数形式，在这里，就是 articles。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<p>执行成功后，articles 表已经出现在数据库里了：</p>\n<p><img src=\"https://camo.githubusercontent.com/a7675080d45339266815b2802e11d685f97c777a/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373137313131323931372e6a7067\" alt=\"article\"></p>\n<h5 id=\"b-使用-artisan-生成-Seeder\"><a href=\"#b-使用-artisan-生成-Seeder\" class=\"headerlink\" title=\"b. 使用 artisan 生成 Seeder\"></a>b. 使用 artisan 生成 Seeder</h5><p>Seeder 是我们接触到的一个新概念，字面意思为播种机。Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。</p>\n<p>运行以下命令创建 Seeder 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:seeder ArticleSeeder</div></pre></td></tr></table></figure>\n<p>我们会发现 learnlaravel5/database/seeds 里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function run()</div><div class=\"line\">&#123;</div><div class=\"line\">    DB::table(&apos;articles&apos;)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    for ($i=0; $i &lt; 10; $i++) &#123;</div><div class=\"line\">        \\App\\Article::create([</div><div class=\"line\">            &apos;title&apos;   =&gt; &apos;Title &apos;.$i,</div><div class=\"line\">            &apos;body&apos;    =&gt; &apos;Body &apos;.$i,</div><div class=\"line\">            &apos;user_id&apos; =&gt; 1,</div><div class=\"line\">        ]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来我们把 ArticleSeeder 注册到系统内。修改 <code>learnlaravel5/database/seeds/DatabaseSeeder.php</code>中的 run 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function run()</div><div class=\"line\">&#123;</div><div class=\"line\">    $this-&gt;call(ArticleSeeder::class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于 database 目录没有像 app 目录那样被 composer 注册为 psr-4 自动加载，采用的是 psr-0 classmap 方式，所以我们还需要运行以下命令把<code>ArticleSeeder.php</code>加入自动加载系统，避免找不到类的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer dump-autoload</div></pre></td></tr></table></figure>\n<p>然后执行 seed：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan db:seed</div></pre></td></tr></table></figure>\n<p>你应该得到如下结果：<br><img src=\"https://camo.githubusercontent.com/629b71dcd42b94825e9075b5eaada4758b083dbd/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373330353231313336362e6a7067\" alt=\"seed\"><br>这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据：</p>\n<p><img src=\"http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14627305849059.jpg\" alt=\"data\"></p>\n<h4 id=\"原文：https-github-com-johnlui-Learn-Laravel-5-issues-4\"><a href=\"#原文：https-github-com-johnlui-Learn-Laravel-5-issues-4\" class=\"headerlink\" title=\"原文：https://github.com/johnlui/Learn-Laravel-5/issues/4\"></a>原文：<a href=\"https://github.com/johnlui/Learn-Laravel-5/issues/4\" target=\"_blank\" rel=\"external\">https://github.com/johnlui/Learn-Laravel-5/issues/4</a></h4>","excerpt":"","more":"<blockquote>\n<p>本教程示例代码见：<a href=\"https://github.com/johnlui/Learn-Laravel-5\">https://github.com/johnlui/Learn-Laravel-5</a></p>\n</blockquote>\n<p>在任何地方卡住，最快的办法就是去看示例代码。</p>\n<h3 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h3><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><p>许多人被拦在了学习 Laravel 的第一步：安装。并不是因为安装有多复杂，而是因为【众所周知的原因】。在此我推荐一个 composer 全量中国镜像：<a href=\"http://pkg.phpcomposer.com/\">http://pkg.phpcomposer.com/</a> 。启用 Composer 镜像服务作为本教程的第一项小作业请自行完成哦。</p>\n<p>镜像配置完成后，在终端（Terminal 或 CMD）里切换到你想要放置该网站的目录下（如 C:\\wwwroot、/Library/WebServer/Documents/、/var/www/html、/etc/nginx/html 等），运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project laravel/laravel learnlaravel5 5.2.31</div></pre></td></tr></table></figure>\n<p>然后，稍等片刻，当前目录下就会出现一个叫 learnlaravel5 的文件夹，安装完成啦~</p>\n<h4 id=\"2-运行\"><a href=\"#2-运行\" class=\"headerlink\" title=\"2.运行\"></a>2.运行</h4><p>为了尽可能地减缓学习曲线，推荐宝宝们使用 PHP 内置 web 服务器驱动我们的网站。运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd learnlaravel5/public</div><div class=\"line\">php -S 0.0.0.0:1024</div></pre></td></tr></table></figure>\n<p>这时候访问 <a href=\"http://127.0.0.1:1024\">http://127.0.0.1:1024</a> 就是这个样子的：</p>\n<p><img src=\"https://camo.githubusercontent.com/813c1698e040f3b29cd92f763e6ce1e2dd29c03f/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323831303139323130342e6a7067\" alt=\"laravel5\"></p>\n<p>我在本地 hosts 中绑定了 fuck.io 到 127.0.0.1，所以截图中我的域名是 fuck.io 而不是 127.0.0.1，其实他们是完全等价的。</p>\n<p>这时候你可能要问了：为什么本宝宝的页面是一片空白？请使用开发者工具查看网络请求，只要是 200 状态就说明运行成功了，空白是因为这个页面引用了 Google Fonts，你懂的~</p>\n<p>至于为什么选择 1024 端口？因为他是 *UNIX 系统动态端口的开始，是我们不需要 root 权限就可以随意监听的数值最小的端口。</p>\n<p>另外，建议不熟悉 PHP 运行环境搭建的宝宝们不要轻易尝试使用 Apache 或 Nginx 驱动 Laravel，特别是在开启了 SELinux 的 Linux 系统上跑。关于 Laravel 在 Linux 上部署的大坑，本宝宝可能要单写一篇长文分享给宝宝们。</p>\n<h4 id=\"3-体验牛逼闪闪的-Auth-系统\"><a href=\"#3-体验牛逼闪闪的-Auth-系统\" class=\"headerlink\" title=\"3. 体验牛逼闪闪的 Auth 系统\"></a>3. 体验牛逼闪闪的 Auth 系统</h4><p>Laravel 利用 PHP5.4 的新特性 trait 内置了非常完善好用的简单用户登录注册功能，适合一些不需要复杂用户权限管理的系统，例如公司内部用的简单管理系统。</p>\n<p>激活这个功能非常容易，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:auth</div></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：\">http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：</a><br><img src=\"https://camo.githubusercontent.com/1c989f7363771f11d916c5112066f3839b3a88aa/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323936353739343437372e6a7067\" alt=\"login\"></p>\n<ol>\n<li>连接数据库</li>\n</ol>\n<p>接下来我们要连接数据库了，请自行准备好 MySQL 服务哦。</p>\n<h5 id=\"a-修改配置\"><a href=\"#a-修改配置\" class=\"headerlink\" title=\"a. 修改配置\"></a>a. 修改配置</h5><p>不出意外的话，learnlaravel5 目录下已经有了一个 .env 文件，如果没有，可以复制一份 .env.example 文件重命名成 .env，修改下面几行的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB_HOST=127.0.0.1</div><div class=\"line\">DB_PORT=3306</div><div class=\"line\">DB_DATABASE=laravel5</div><div class=\"line\">DB_USERNAME=root</div><div class=\"line\">DB_PASSWORD=root</div></pre></td></tr></table></figure>\n<p>推荐新建一个名为 laravel5 的数据库，并且使用 root 账户直接操作，降低学习数据库的成本。</p>\n<p>数据库配置好之后，在登录界面填写任意邮箱和密码，点击 Login，你应该会得到以下画面：<br><img src=\"https://camo.githubusercontent.com/8abbf525301bd53ec10368258e38e69b0174bd42/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032303236323138312e6a7067\" alt=\"error\"></p>\n<p>它说 users 表不存在呀，接下来我们将见识 Laravel 另外一个实用特性。</p>\n<h5 id=\"b-进行数据库迁移（migration）\"><a href=\"#b-进行数据库迁移（migration）\" class=\"headerlink\" title=\"b. 进行数据库迁移（migration）\"></a>b. 进行数据库迁移（migration）</h5><p>运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<p>我们得到了如下结果：</p>\n<p><img src=\"https://camo.githubusercontent.com/2e3c07b19fca3a3be7eb994beccbf2e44d1e3671/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032323136393039342e6a7067\" alt=\"result\"></p>\n<p>数据库迁移成功！赶快打开 <a href=\"http://fuck.io:1024/home\">http://fuck.io:1024/home</a> 注册一个用户试试吧~</p>\n<p>下图是本宝宝注册了一个 username 为 1 用户：</p>\n<p><img src=\"http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14623689497675.jpg\" alt=\"user1\"></p>\n<h5 id=\"c-migration-是啥？\"><a href=\"#c-migration-是啥？\" class=\"headerlink\" title=\"c. migration 是啥？\"></a>c. migration 是啥？</h5><p>打开 <code>learnlaravel5/database/migrations/2014_10_12_000000_create_users_table.php</code>文件，你肯定能一眼看出它的作用：用 PHP 描述数据库构造，并且使用命令行一次性部署所有数据库结构。</p>\n<h4 id=\"5-使用-Laravel-的“葵花宝典”：Eloquent\"><a href=\"#5-使用-Laravel-的“葵花宝典”：Eloquent\" class=\"headerlink\" title=\"5. 使用 Laravel 的“葵花宝典”：Eloquent\"></a>5. 使用 Laravel 的“葵花宝典”：Eloquent</h4><p>Eloquent 是 Laravel 的 ORM，是 Laravel 系统中最强大的地方，没有之一。当初 Laravel 作者在开发第一版的时候花了整整三分之一的时间才搞出来 Eloquent。当然，“欲练此功，必先自宫”，Eloquent 也是 Laravel 中最慢的地方，迄今无法解决。（路由、自动载入、配置分散、视图引发的性能问题都通过缓存几乎彻底解决了）</p>\n<p>当然，我们还是要承袭第一版教程中对 Eloquent ORM 的描述：鹅妹子英！</p>\n<h5 id=\"a-Eloquent-是什么\"><a href=\"#a-Eloquent-是什么\" class=\"headerlink\" title=\"a. Eloquent 是什么\"></a>a. Eloquent 是什么</h5><p>Eloquent 是 Laravel 内置的 ORM 系统，我们的 Model 类将继承自 Eloquent 提供的 Model 类，然后，就天生具备了数十个异常强大的函数，从此想干啥事儿都是一行代码就搞定。</p>\n<h5 id=\"b-怎么用？\"><a href=\"#b-怎么用？\" class=\"headerlink\" title=\"b. 怎么用？\"></a>b. 怎么用？</h5><p>我们使用 Artisan 工具新建 Model 类及其附属的 Migration 和 Seeder（数据填充）类。</p>\n<p>运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:model Article</div></pre></td></tr></table></figure>\n<p>去看看你的 app 目录，下面是不是多了一个 Article.php 文件？那就是 Artisan 帮我们生成的 Model 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Database\\Eloquent\\Model;</div><div class=\"line\"></div><div class=\"line\">class Article extends Model</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此简洁有力的代码，隐藏了背后极高的难度和巨大的复杂度，让我们闭上眼睛，静静地感受 Laravel 的优雅吧 (～￣▽￣)～</p>\n<h3 id=\"6-使用-Migration-和-Seeder\"><a href=\"#6-使用-Migration-和-Seeder\" class=\"headerlink\" title=\"6. 使用 Migration 和 Seeder\"></a>6. 使用 Migration 和 Seeder</h3><p>接下来我们生成对应 Article 这个 Model 的 Migration 和 Seeder。</p>\n<h5 id=\"a-使用-artisan-生成-Migration\"><a href=\"#a-使用-artisan-生成-Migration\" class=\"headerlink\" title=\"a. 使用 artisan 生成 Migration\"></a>a. 使用 artisan 生成 Migration</h5><p>在 learnlaravel5 目录下运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:migration create_article_table</div></pre></td></tr></table></figure>\n<p>成功之后打开 <code>learnlaravel5/database/migrations</code>，你会发现有一个名为 2<strong>*</strong>_create_article_table 的文件被创建了。我们修改他的 up 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function up()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::create(&apos;articles&apos;, function(Blueprint $table)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">        $table-&gt;string(&apos;title&apos;);</div><div class=\"line\">        $table-&gt;text(&apos;body&apos;)-&gt;nullable();</div><div class=\"line\">        $table-&gt;integer(&apos;user_id&apos;);</div><div class=\"line\">        $table-&gt;timestamps();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这几行代码描述的是 Article 对应的数据库中那张表的结构。Laravel 默认 Model 对应的表名是这个英文单词的复数形式，在这里，就是 articles。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<p>执行成功后，articles 表已经出现在数据库里了：</p>\n<p><img src=\"https://camo.githubusercontent.com/a7675080d45339266815b2802e11d685f97c777a/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373137313131323931372e6a7067\" alt=\"article\"></p>\n<h5 id=\"b-使用-artisan-生成-Seeder\"><a href=\"#b-使用-artisan-生成-Seeder\" class=\"headerlink\" title=\"b. 使用 artisan 生成 Seeder\"></a>b. 使用 artisan 生成 Seeder</h5><p>Seeder 是我们接触到的一个新概念，字面意思为播种机。Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。</p>\n<p>运行以下命令创建 Seeder 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:seeder ArticleSeeder</div></pre></td></tr></table></figure>\n<p>我们会发现 learnlaravel5/database/seeds 里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function run()</div><div class=\"line\">&#123;</div><div class=\"line\">    DB::table(&apos;articles&apos;)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    for ($i=0; $i &lt; 10; $i++) &#123;</div><div class=\"line\">        \\App\\Article::create([</div><div class=\"line\">            &apos;title&apos;   =&gt; &apos;Title &apos;.$i,</div><div class=\"line\">            &apos;body&apos;    =&gt; &apos;Body &apos;.$i,</div><div class=\"line\">            &apos;user_id&apos; =&gt; 1,</div><div class=\"line\">        ]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来我们把 ArticleSeeder 注册到系统内。修改 <code>learnlaravel5/database/seeds/DatabaseSeeder.php</code>中的 run 函数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function run()</div><div class=\"line\">&#123;</div><div class=\"line\">    $this-&gt;call(ArticleSeeder::class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于 database 目录没有像 app 目录那样被 composer 注册为 psr-4 自动加载，采用的是 psr-0 classmap 方式，所以我们还需要运行以下命令把<code>ArticleSeeder.php</code>加入自动加载系统，避免找不到类的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer dump-autoload</div></pre></td></tr></table></figure>\n<p>然后执行 seed：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan db:seed</div></pre></td></tr></table></figure>\n<p>你应该得到如下结果：<br><img src=\"https://camo.githubusercontent.com/629b71dcd42b94825e9075b5eaada4758b083dbd/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373330353231313336362e6a7067\" alt=\"seed\"><br>这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据：</p>\n<p><img src=\"http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14627305849059.jpg\" alt=\"data\"></p>\n<h4 id=\"原文：https-github-com-johnlui-Learn-Laravel-5-issues-4\"><a href=\"#原文：https-github-com-johnlui-Learn-Laravel-5-issues-4\" class=\"headerlink\" title=\"原文：https://github.com/johnlui/Learn-Laravel-5/issues/4\"></a>原文：<a href=\"https://github.com/johnlui/Learn-Laravel-5/issues/4\">https://github.com/johnlui/Learn-Laravel-5/issues/4</a></h4>"},{"title":"蔡氏效应","date":"2017-02-09T09:21:46.000Z","_content":"\n## 蔡格尼克记忆效应\n\n\n**蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。**\n\n--------\n**实验背景**\n\n蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。\n\n![蔡格尼克记忆效应](http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg)\nBluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.\nThe picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.\n\n20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.\n\n\n--------\n**结论应用**\n\n很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。\n对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。\n一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。\n非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。\n\n--------\n**相关实例**\n信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？\n之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。\n\n![不做“工作狂”](http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382)\n\n一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。\n\n泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”\n一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。\n\n--------\n**原因解释**\n\n为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。**结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况**。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。\n\n工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘\n\n","source":"_posts/蔡氏效应.md","raw":"---\ntitle: 蔡氏效应\ndate: 2017-02-09 17:21:46\ntags: 蔡氏效应\ncategories: 杂谈\n---\n\n## 蔡格尼克记忆效应\n\n\n**蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。**\n\n--------\n**实验背景**\n\n蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。\n\n![蔡格尼克记忆效应](http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg)\nBluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.\nThe picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.\n\n20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.\n\n\n--------\n**结论应用**\n\n很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。\n对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。\n一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。\n非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。\n\n--------\n**相关实例**\n信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？\n之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。\n\n![不做“工作狂”](http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382)\n\n一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。\n\n泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”\n一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。\n\n--------\n**原因解释**\n\n为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。**结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况**。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。\n\n工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘\n\n","slug":"蔡氏效应","published":1,"updated":"2017-02-09T09:30:38.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz6db8ya000eqckidpwzoeg3","content":"<h2 id=\"蔡格尼克记忆效应\"><a href=\"#蔡格尼克记忆效应\" class=\"headerlink\" title=\"蔡格尼克记忆效应\"></a>蔡格尼克记忆效应</h2><p><strong>蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。</strong></p>\n<hr>\n<p><strong>实验背景</strong></p>\n<p>蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。</p>\n<p><img src=\"http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg\" alt=\"蔡格尼克记忆效应\"><br>Bluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.<br>The picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.</p>\n<p>20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.</p>\n<hr>\n<p><strong>结论应用</strong></p>\n<p>很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。<br>对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。<br>非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。</p>\n<hr>\n<p><strong>相关实例</strong><br>信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？<br>之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。</p>\n<p><img src=\"http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382\" alt=\"不做“工作狂”\"></p>\n<p>一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。</p>\n<p>泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。</p>\n<hr>\n<p><strong>原因解释</strong></p>\n<p>为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。<strong>结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况</strong>。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。</p>\n<p>工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘</p>\n","excerpt":"","more":"<h2 id=\"蔡格尼克记忆效应\"><a href=\"#蔡格尼克记忆效应\" class=\"headerlink\" title=\"蔡格尼克记忆效应\"></a>蔡格尼克记忆效应</h2><p><strong>蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。</strong></p>\n<hr>\n<p><strong>实验背景</strong></p>\n<p>蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。</p>\n<p><img src=\"http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg\" alt=\"蔡格尼克记忆效应\"><br>Bluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.<br>The picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.</p>\n<p>20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.</p>\n<hr>\n<p><strong>结论应用</strong></p>\n<p>很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。<br>对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。<br>非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。</p>\n<hr>\n<p><strong>相关实例</strong><br>信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？<br>之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。</p>\n<p><img src=\"http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382\" alt=\"不做“工作狂”\"></p>\n<p>一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。</p>\n<p>泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。</p>\n<hr>\n<p><strong>原因解释</strong></p>\n<p>为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。<strong>结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况</strong>。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。</p>\n<p>工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz6db8x70000qckiz7b351l9","category_id":"ciz6db8xr0003qckixqsxohnw","_id":"ciz6db8y9000cqckip6l15qro"},{"post_id":"ciz6db8y00007qcki2wzfkikz","category_id":"ciz6db8xr0003qckixqsxohnw","_id":"ciz6db8ye000hqcki2ht331vp"},{"post_id":"ciz6db8y5000bqckitxyqf1zi","category_id":"ciz6db8xr0003qckixqsxohnw","_id":"ciz6db8yf000jqcki2jwv61y6"},{"post_id":"ciz6db8x70002qckinv5uryy6","category_id":"ciz6db8xr0003qckixqsxohnw","_id":"ciz6db8yh000nqcki2012f9t3"},{"post_id":"ciz6db8xu0005qckik4bbe1bl","category_id":"ciz6db8yb000fqckiwxxy8cs6","_id":"ciz6db8yi000pqckiq8uvf0tm"},{"post_id":"ciz6db8ya000eqckidpwzoeg3","category_id":"ciz6db8yf000lqckir07kqndw","_id":"ciz6db8yk000rqckiua5kezsj"}],"PostTag":[{"post_id":"ciz6db8x70000qckiz7b351l9","tag_id":"ciz6db8xt0004qckifuafcoey","_id":"ciz6db8y5000aqckinl6c2e1j"},{"post_id":"ciz6db8y00007qcki2wzfkikz","tag_id":"ciz6db8xt0004qckifuafcoey","_id":"ciz6db8ya000dqckiqlgatylm"},{"post_id":"ciz6db8y5000bqckitxyqf1zi","tag_id":"ciz6db8xt0004qckifuafcoey","_id":"ciz6db8ye000iqcki34mnofgi"},{"post_id":"ciz6db8x70002qckinv5uryy6","tag_id":"ciz6db8y20009qckimdg3f3kl","_id":"ciz6db8yf000kqcki1vu20foi"},{"post_id":"ciz6db8xu0005qckik4bbe1bl","tag_id":"ciz6db8yc000gqckibo311x9u","_id":"ciz6db8yh000oqckiaqxam44v"},{"post_id":"ciz6db8ya000eqckidpwzoeg3","tag_id":"ciz6db8yh000mqcki9vf5zfkg","_id":"ciz6db8yk000qqckiqaj0qn2d"}],"Tag":[{"name":"laravel","_id":"ciz6db8xt0004qckifuafcoey"},{"name":"git","_id":"ciz6db8y20009qckimdg3f3kl"},{"name":"罗辑思维","_id":"ciz6db8yc000gqckibo311x9u"},{"name":"蔡氏效应","_id":"ciz6db8yh000mqcki9vf5zfkg"}]}}