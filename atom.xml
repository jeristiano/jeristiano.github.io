<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeremy&#39;s space</title>
  <subtitle>Stay Simple Stay Naive , Don&#39;t Be Evil</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeristiano.github.io/"/>
  <updated>2017-03-11T14:25:23.409Z</updated>
  <id>https://jeristiano.github.io/</id>
  
  <author>
    <name>jeremyK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://jeristiano.github.io/2017/03/11/Laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%A5%9E%E5%A5%87%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
    <id>https://jeristiano.github.io/2017/03/11/Laravel-学习笔记：神奇的服务容器/</id>
    <published>2017-03-11T14:25:23.371Z</published>
    <updated>2017-03-11T14:25:23.409Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>Laravel-学习笔记：神奇的服务容器</title></head><body><article class="markdown-body"><hr>
<p>title: Laravel 学习笔记：神奇的服务容器<br>
date: 2017-03-08 22:48:18<br>
tags: laravel<br>
categories: 编程</p>
<hr>
<blockquote>
<p>学习laravel的过程经常有感于它神奇的服务容器机制，又限于水平有限，不能深刻理解，当然这需要时间。</p>
<p>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。<br>
当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入（DI）”。</p>
</blockquote>
<h3 id="ioc-laravel"><a name="user-content-ioc-laravel" href="#ioc-laravel" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>IoC 容器， laravel 的核心</h3>
<p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。</p>
<p>作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>
<p>本文一大半内容都是通过举例来让读者去理解什么是 <strong>IoC（控制反转） 和 DI（依赖注入）</strong>，通过理解这些概念，来更加深入。更多关于 laravel 服务容器的用法建议阅读文档即可。</p>
<h3 id="ioc"><a name="user-content-ioc" href="#ioc" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>IoC 容器诞生的故事</h3>
<p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>
<p>超人和超能力，依赖的产生！</p>
<p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>
<blockquote>
<p>怪物横行的世界，总归需要点超级人物来摆平。</p>
</blockquote>
<p>我们把一个“超人”作为一个类，</p>
<p><pre><code>class Superman {}

</code></pre><br>
我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>
<pre><code>class Power {
    /**
     * 能力值
     */
    protected $ability;

    /**
     * 能力范围或距离
     */
    protected $range;

    public function __construct($ability, $range)
    {
        $this-&gt;ability = $ability;
        $this-&gt;range = $range;
    }
}

</code></pre>

<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力:</p>
<p><pre><code>class Superman
{
    protected $power;

    public function __construct()
    {
        $this-&gt;power = new Power(999, 100);
    }
}

</code></pre><br>
这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>
<blockquote>
<p>所谓“依赖”，就是 “我若依赖你，我就不能离开你”。</p>
</blockquote>
<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>
<h3 id="_1"><a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>一堆乱麻 —— 可怕的依赖</h3>
<p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p>
<ul>
<li>飞行，属性有：飞行速度、持续飞行时间</li>
<li>蛮力，属性有：力量值</li>
<li>能量弹，属性有：伤害值、射击距离、同时射击个数</li>
</ul>
<p>我们创建了如下类：</p>
<p><pre><code>class Flight
{
    protected $speed;
    protected $holdtime;
    public function __construct($speed, $holdtime) {}
}

class Force
{
    protected $force;
    public function __construct($force) {}
}

class Shot
{
    protected $atk;
    protected $range;
    protected $limit;
    public function __construct($atk, $range, $limit) {}

</code></pre><br>
为了省事儿我没有详细写出 __construct() 这个构造函数的全部，只写了需要传递的参数。</p>
<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下</p>
<p><pre><code>class Superman
{
    protected $power;

    public function __construct()
    {
        $this-&gt;power = new Fight(9, 100);
        // $this-&gt;power = new Force(45);
        // $this-&gt;power = new Shot(99, 50, 2);
        /*
        $this-&gt;power = array(
            new Force(45),
            new Shot(99, 50, 2)
        );
        */
    }
}
</code></pre><br>
我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的 超能力，或者需要 变更 超能力的方法，我们必须 重新改造 超人。<br>
<strong>换句话说就是，改变超能力的同时，我还得重新制造个超人。</strong>效率太低了！新超人还没创造完成世界早已被毁灭。</p>
<blockquote>
<p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了</p>
</blockquote>
<p>对，就是这样的。</p>
<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 <strong>“控制反转（IoC）”。</strong></p>
<h3 id="_2"><a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>工厂模式，依赖转移！</h3>
<p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>
<blockquote>
<p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。</p>
</blockquote>
<p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>
<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>
<p><pre><code>class SuperModuleFactory
{
    public function makeModule($moduleName, $options)
    {
        switch ($moduleName) {
            case 'Fight':   return new Fight($options[0], $options[1]);
            case 'Force':   return new Force($options[0]);
            case 'Shot':    return new Shot($options[0], $options[1], $options[2]);
        }
    }
}

</code></pre><br>
这时候，超人 创建之初就可以使用这个工厂！</p>
<pre><code>class Superman
{
    protected $power;

    public function __construct()
    {
        // 初始化工厂
        $factory = new SuperModuleFactory;

        // 通过工厂提供的方法制造需要的模块
        $this-&gt;power = $factory-&gt;makeModule('Fight', [9, 100]);
        // $this-&gt;power = $factory-&gt;makeModule('Force', [45]);
        // $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);
        /*
        $this-&gt;power = array(
            $factory-&gt;makeModule('Force', [45]),
            $factory-&gt;makeModule('Shot', [99, 50, 2])
        );
        */
    }
}
</code></pre>

<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>
<pre><code>class Superman
{
    protected $power;

    public function __construct(array $modules)
    {
        // 初始化工厂
        $factory = new SuperModuleFactory;

        // 通过工厂提供的方法制造需要的模块
        foreach ($modules as $moduleName =&gt; $moduleOptions) {
            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);
        }
    }
}

// 创建超人
$superman = new Superman([
    'Fight' =&gt; [9, 100], 
    'Shot' =&gt; [99, 50, 2]
    ]);

</code></pre>

<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 <code>SuperModuleFactory</code> 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>
<h3 id="ioc_1"><a name="user-content-ioc_1" href="#ioc_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h3>
<blockquote>
<p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>
</blockquote>
<p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。<br>
我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>
<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）</p>
<p><pre><code>class SuperModuleFactory
{
    public function makeModule($moduleName, $options)
    {
        switch ($moduleName) {
            case 'Fight':   return new Fight($options[0], $options[1]);
            case 'Force':   return new Force($options[0]);
            case 'Shot':    return new Shot($options[0], $options[1], $options[2]);
            // case 'more': .......
            // case 'and more': .......
            // case 'and more': .......
            // case 'oh no! its too many!': .......
        }
    }
}
</code></pre><br>
看到没。。。噩梦般的感受！</p>
<blockquote>
<p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p>
</blockquote>
<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用</p>
<pre><code>interface SuperModuleInterface
{
    /**
     * 超能力激活方法
     *
     * 任何一个超能力都得有该方法，并拥有一个参数
     *@param array $target 针对目标，可以是一个或多个，自己或他人
     */
    public function activate(array $target);
}
</code></pre>

<blockquote>
<p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p>
</blockquote>
<p>其实，这就是 php 中 接口（ <code>interface</code> ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（<code>object</code>） 本身是由他的模板或者原型 —— 类 （<code>class</code>） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（<code>class</code>），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p>
<p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p>
<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类</p>
<p><pre><code>/**
 * X-超能量
 */
class XPower implements SuperModuleInterface
{
    public function activate(array $target)
    {
        // 这只是个例子。。具体自行脑补
    }
}

/**
 * 终极炸弹 （就这么俗）
 */
class UltraBomb implements SuperModuleInterface
{
    public function activate(array $target)
    {
        // 这只是个例子。。具体自行脑补
    }
}
</code></pre><br>
同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>
<pre><code>class Superman
{
    protected $module;

    public function __construct(SuperModuleInterface $module)
    {
        $this-&gt;module = $module
    }
}
</code></pre>

<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 <code>SuperModuleInterface</code> 接口的实现。否则就会提示错误。</p>
<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p>
<blockquote>
<p>现在有人疑惑了，你要讲的 依赖注入 呢？</p>
<p>其实，上面讲的内容，正是依赖注入。</p>
</blockquote>
<p>什么叫做 依赖注入？</p>
<p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 <code>__construct</code> 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于 <code>依赖注入（DI）</code> 。<br>
是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>
<pre><code>// 超能力模组
$superModule = new XPower;

// 初始化一个超人，并注入一个超能力模组依赖
$superMan = new Superman($superModule);
</code></pre>

<p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p>
<h3 id="ioc_2"><a name="user-content-ioc_2" href="#ioc_2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>更为先进的工厂 —— IoC 容器！</h3>
<p>刚刚列了一段代码：</p>
<p><pre><code>$superModule = new XPower;
$superMan = new Superman($superModule);
</code></pre><br>
读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>
<blockquote>
<p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p>
</blockquote>
<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— <code>IoC 容器</code>。</p>
<p><pre><code>class Container
{
    protected $binds;

    protected $instances;

    public function bind($abstract, $concrete)
    {
        if ($concrete instanceof Closure) {
            $this-&gt;binds[$abstract] = $concrete;
        } else {
            $this-&gt;instances[$abstract] = $concrete;
        }
    }

    public function make($abstract, $parameters = [])
    {
        if (isset($this-&gt;instances[$abstract])) {
            return $this-&gt;instances[$abstract];
        }

        array_unshift($parameters, $this);

        return call_user_func_array($this-&gt;binds[$abstract], $parameters);
    }
}

</code></pre><br>
这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p>
<p><pre><code>// 创建一个容器（后面称作超级工厂）
$container = new Container;

// 向该 超级工厂 添加 超人 的生产脚本
$container-&gt;bind('superman', function($container, $moduleName) {
    return new Superman($container-&gt;make($moduleName));
});

// 向该 超级工厂 添加 超能力模组 的生产脚本
$container-&gt;bind('xpower', function($container) {
    return new XPower;
});

// 同上
$container-&gt;bind('ultrabomb', function($container) {
    return new UltraBomb;
});

// ******************  华丽丽的分割线  **********************
// 开始启动生产
$superman_1 = $container-&gt;make('superman', ['xpower']);
$superman_2 = $container-&gt;make('superman', ['ultrabomb']);
$superman_3 = $container-&gt;make('superman', ['xpower']);
// ...随意添加
</code></pre><br>
看到没？通过最初的 绑定（bind） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（make） 操作被调用执行时，才会触发。</p>
<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p></article></body></html>]]></content>
    
    <summary type="html">
    
      &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  marg
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Laravel 学习笔记：神奇的服务容器</title>
    <link href="https://jeristiano.github.io/2017/03/08/Laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%A5%9E%E5%A5%87%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
    <id>https://jeristiano.github.io/2017/03/08/Laravel-学习笔记：神奇的服务容器/</id>
    <published>2017-03-08T14:48:18.000Z</published>
    <updated>2017-03-11T14:32:04.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习laravel的过程经常有感于它神奇的服务容器机制，又限于水平有限，不能深刻理解，当然这需要时间。</p>
<p>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。<br>当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入（DI）”。</p>
</blockquote>
<h3 id="IoC-容器，-laravel-的核心"><a href="#IoC-容器，-laravel-的核心" class="headerlink" title="IoC 容器， laravel 的核心"></a>IoC 容器， laravel 的核心</h3><p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。</p>
<p>作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>
<p>本文一大半内容都是通过举例来让读者去理解什么是 <strong>IoC（控制反转） 和 DI（依赖注入）</strong>，通过理解这些概念，来更加深入。更多关于 laravel 服务容器的用法建议阅读文档即可。</p>
<h3 id="IoC-容器诞生的故事"><a href="#IoC-容器诞生的故事" class="headerlink" title="IoC 容器诞生的故事"></a>IoC 容器诞生的故事</h3><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>
<p>超人和超能力，依赖的产生！</p>
<p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>
<blockquote>
<p>怪物横行的世界，总归需要点超级人物来摆平。</p>
</blockquote>
<p>我们把一个“超人”作为一个类，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class Superman &#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Power &#123;</div><div class="line">    /**</div><div class="line">     * 能力值</div><div class="line">     */</div><div class="line">    protected $ability;</div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 能力范围或距离</div><div class="line">     */</div><div class="line">    protected $range;</div><div class="line"> </div><div class="line">    public function __construct($ability, $range)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;ability = $ability;</div><div class="line">        $this-&gt;range = $range;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Superman</div><div class="line">&#123;</div><div class="line">    protected $power;</div><div class="line"> </div><div class="line">    public function __construct()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;power = new Power(999, 100);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>
<blockquote>
<p>所谓“依赖”，就是 “我若依赖你，我就不能离开你”。</p>
</blockquote>
<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>
<h3 id="一堆乱麻-——-可怕的依赖"><a href="#一堆乱麻-——-可怕的依赖" class="headerlink" title="一堆乱麻 —— 可怕的依赖"></a>一堆乱麻 —— 可怕的依赖</h3><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p>
<ul>
<li>飞行，属性有：飞行速度、持续飞行时间</li>
<li>蛮力，属性有：力量值</li>
<li>能量弹，属性有：伤害值、射击距离、同时射击个数</li>
</ul>
<p>我们创建了如下类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Flight</div><div class="line">&#123;</div><div class="line">    protected $speed;</div><div class="line">    protected $holdtime;</div><div class="line">    public function __construct($speed, $holdtime) &#123;&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">class Force</div><div class="line">&#123;</div><div class="line">    protected $force;</div><div class="line">    public function __construct($force) &#123;&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">class Shot</div><div class="line">&#123;</div><div class="line">    protected $atk;</div><div class="line">    protected $range;</div><div class="line">    protected $limit;</div><div class="line">    public function __construct($atk, $range, $limit) &#123;&#125;</div></pre></td></tr></table></figure>
<p>为了省事儿我没有详细写出 __construct() 这个构造函数的全部，只写了需要传递的参数。</p>
<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Superman</div><div class="line">&#123;</div><div class="line">    protected $power;</div><div class="line"> </div><div class="line">    public function __construct()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;power = new Fight(9, 100);</div><div class="line">        // $this-&gt;power = new Force(45);</div><div class="line">        // $this-&gt;power = new Shot(99, 50, 2);</div><div class="line">        /*</div><div class="line">        $this-&gt;power = array(</div><div class="line">            new Force(45),</div><div class="line">            new Shot(99, 50, 2)</div><div class="line">        );</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的 超能力，或者需要 变更 超能力的方法，我们必须 重新改造 超人。<br><strong>换句话说就是，改变超能力的同时，我还得重新制造个超人。</strong>效率太低了！新超人还没创造完成世界早已被毁灭。</p>
<blockquote>
<p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了</p>
</blockquote>
<p>对，就是这样的。</p>
<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 <strong>“控制反转（IoC）”。</strong></p>
<h3 id="工厂模式，依赖转移！"><a href="#工厂模式，依赖转移！" class="headerlink" title="工厂模式，依赖转移！"></a>工厂模式，依赖转移！</h3><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>
<blockquote>
<p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。</p>
</blockquote>
<p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>
<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class SuperModuleFactory</div><div class="line">&#123;</div><div class="line">    public function makeModule($moduleName, $options)</div><div class="line">    &#123;</div><div class="line">        switch ($moduleName) &#123;</div><div class="line">            case &apos;Fight&apos;:   return new Fight($options[0], $options[1]);</div><div class="line">            case &apos;Force&apos;:   return new Force($options[0]);</div><div class="line">            case &apos;Shot&apos;:    return new Shot($options[0], $options[1], $options[2]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候，超人 创建之初就可以使用这个工厂！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Superman</div><div class="line">&#123;</div><div class="line">    protected $power;</div><div class="line"> </div><div class="line">    public function __construct()</div><div class="line">    &#123;</div><div class="line">        // 初始化工厂</div><div class="line">        $factory = new SuperModuleFactory;</div><div class="line"> </div><div class="line">        // 通过工厂提供的方法制造需要的模块</div><div class="line">        $this-&gt;power = $factory-&gt;makeModule(&apos;Fight&apos;, [9, 100]);</div><div class="line">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Force&apos;, [45]);</div><div class="line">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2]);</div><div class="line">        /*</div><div class="line">        $this-&gt;power = array(</div><div class="line">            $factory-&gt;makeModule(&apos;Force&apos;, [45]),</div><div class="line">            $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2])</div><div class="line">        );</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Superman</div><div class="line">&#123;</div><div class="line">    protected $power;</div><div class="line"> </div><div class="line">    public function __construct(array $modules)</div><div class="line">    &#123;</div><div class="line">        // 初始化工厂</div><div class="line">        $factory = new SuperModuleFactory;</div><div class="line"> </div><div class="line">        // 通过工厂提供的方法制造需要的模块</div><div class="line">        foreach ($modules as $moduleName =&gt; $moduleOptions) &#123;</div><div class="line">            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 创建超人</div><div class="line">$superman = new Superman([</div><div class="line">    &apos;Fight&apos; =&gt; [9, 100], </div><div class="line">    &apos;Shot&apos; =&gt; [99, 50, 2]</div><div class="line">    ]);</div></pre></td></tr></table></figure>
<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 <code>SuperModuleFactory</code> 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>
<h3 id="再进一步！IoC-容器的重要组成-——-依赖注入！"><a href="#再进一步！IoC-容器的重要组成-——-依赖注入！" class="headerlink" title="再进一步！IoC 容器的重要组成 —— 依赖注入！"></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h3><blockquote>
<p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>
</blockquote>
<p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。<br>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>
<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class SuperModuleFactory</div><div class="line">&#123;</div><div class="line">    public function makeModule($moduleName, $options)</div><div class="line">    &#123;</div><div class="line">        switch ($moduleName) &#123;</div><div class="line">            case &apos;Fight&apos;:   return new Fight($options[0], $options[1]);</div><div class="line">            case &apos;Force&apos;:   return new Force($options[0]);</div><div class="line">            case &apos;Shot&apos;:    return new Shot($options[0], $options[1], $options[2]);</div><div class="line">            // case &apos;more&apos;: .......</div><div class="line">            // case &apos;and more&apos;: .......</div><div class="line">            // case &apos;and more&apos;: .......</div><div class="line">            // case &apos;oh no! its too many!&apos;: .......</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到没。。。噩梦般的感受！</p>
<blockquote>
<p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p>
</blockquote>
<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">interface SuperModuleInterface</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 超能力激活方法</div><div class="line">     *</div><div class="line">     * 任何一个超能力都得有该方法，并拥有一个参数</div><div class="line">     *@param array $target 针对目标，可以是一个或多个，自己或他人</div><div class="line">     */</div><div class="line">    public function activate(array $target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p>
</blockquote>
<p>其实，这就是 php 中 接口（ <code>interface</code> ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（<code>object</code>） 本身是由他的模板或者原型 —— 类 （<code>class</code>） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（<code>class</code>），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p>
<p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p>
<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * X-超能量</div><div class="line"> */</div><div class="line">class XPower implements SuperModuleInterface</div><div class="line">&#123;</div><div class="line">    public function activate(array $target)</div><div class="line">    &#123;</div><div class="line">        // 这只是个例子。。具体自行脑补</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">/**</div><div class="line"> * 终极炸弹 （就这么俗）</div><div class="line"> */</div><div class="line">class UltraBomb implements SuperModuleInterface</div><div class="line">&#123;</div><div class="line">    public function activate(array $target)</div><div class="line">    &#123;</div><div class="line">        // 这只是个例子。。具体自行脑补</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Superman</div><div class="line">&#123;</div><div class="line">    protected $module;</div><div class="line"> </div><div class="line">    public function __construct(SuperModuleInterface $module)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;module = $module</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 <code>SuperModuleInterface</code> 接口的实现。否则就会提示错误。</p>
<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p>
<blockquote>
<p>现在有人疑惑了，你要讲的 依赖注入 呢？</p>
<p>其实，上面讲的内容，正是依赖注入。</p>
</blockquote>
<p>什么叫做 依赖注入？</p>
<p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 <code>__construct</code> 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于 <code>依赖注入（DI）</code> 。<br>是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 超能力模组</div><div class="line">$superModule = new XPower;</div><div class="line"> </div><div class="line">// 初始化一个超人，并注入一个超能力模组依赖</div><div class="line">$superMan = new Superman($superModule);</div></pre></td></tr></table></figure>
<p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p>
<h3 id="更为先进的工厂-——-IoC-容器！"><a href="#更为先进的工厂-——-IoC-容器！" class="headerlink" title="更为先进的工厂 —— IoC 容器！"></a>更为先进的工厂 —— IoC 容器！</h3><p>刚刚列了一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$superModule = new XPower;</div><div class="line">$superMan = new Superman($superModule);</div></pre></td></tr></table></figure>
<p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>
<blockquote>
<p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p>
</blockquote>
<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— <code>IoC 容器</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Container</div><div class="line">&#123;</div><div class="line">    protected $binds;</div><div class="line"> </div><div class="line">    protected $instances;</div><div class="line"> </div><div class="line">    public function bind($abstract, $concrete)</div><div class="line">    &#123;</div><div class="line">        if ($concrete instanceof Closure) &#123;</div><div class="line">            $this-&gt;binds[$abstract] = $concrete;</div><div class="line">        &#125; else &#123;</div><div class="line">            $this-&gt;instances[$abstract] = $concrete;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public function make($abstract, $parameters = [])</div><div class="line">    &#123;</div><div class="line">        if (isset($this-&gt;instances[$abstract])) &#123;</div><div class="line">            return $this-&gt;instances[$abstract];</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        array_unshift($parameters, $this);</div><div class="line"> </div><div class="line">        return call_user_func_array($this-&gt;binds[$abstract], $parameters);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 创建一个容器（后面称作超级工厂）</div><div class="line">$container = new Container;</div><div class="line"> </div><div class="line">// 向该 超级工厂 添加 超人 的生产脚本</div><div class="line">$container-&gt;bind(&apos;superman&apos;, function($container, $moduleName) &#123;</div><div class="line">    return new Superman($container-&gt;make($moduleName));</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// 向该 超级工厂 添加 超能力模组 的生产脚本</div><div class="line">$container-&gt;bind(&apos;xpower&apos;, function($container) &#123;</div><div class="line">    return new XPower;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// 同上</div><div class="line">$container-&gt;bind(&apos;ultrabomb&apos;, function($container) &#123;</div><div class="line">    return new UltraBomb;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// ******************  华丽丽的分割线  **********************</div><div class="line">// 开始启动生产</div><div class="line">$superman_1 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</div><div class="line">$superman_2 = $container-&gt;make(&apos;superman&apos;, [&apos;ultrabomb&apos;]);</div><div class="line">$superman_3 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</div><div class="line">// ...随意添加</div></pre></td></tr></table></figure>
<p>看到没？通过最初的 绑定（<code>bind</code>） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 <code>生产（make）</code> 操作被调用执行时，才会触发。</p>
<blockquote>
<p>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。</p>
</blockquote>
<p>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 反射（Reflection） 实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！<br><a href="http://php.net/manual/zh/book.reflection.php" target="_blank" rel="external">http://php.net/manual/zh/book.reflection.php</a></p>
<h3 id="回归正常世界。我们开始重新审视-laravel-的核心。"><a href="#回归正常世界。我们开始重新审视-laravel-的核心。" class="headerlink" title="回归正常世界。我们开始重新审视 laravel 的核心。"></a>回归正常世界。我们开始重新审视 laravel 的核心。</h3><p>现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>
<p>可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如<code>Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）</code>等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel 的服务容器负责的。</p>
<blockquote>
<p>本文转载自：<a href="https://www.insp.top/article/learn-laravel-container?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">laravel 学习笔记 —— 神奇的服务容器</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习laravel的过程经常有感于它神奇的服务容器机制，又限于水平有限，不能深刻理解，当然这需要时间。&lt;/p&gt;
&lt;p&gt;容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。&lt;br&gt;当
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp框架RBAC权限控制和auth权限控制类</title>
    <link href="https://jeristiano.github.io/2017/03/01/thinkphp%E6%A1%86%E6%9E%B6RBAC%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%92%8Cauth%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E7%B1%BB/"/>
    <id>https://jeristiano.github.io/2017/03/01/thinkphp框架RBAC权限控制和auth权限控制类/</id>
    <published>2017-03-01T11:41:07.000Z</published>
    <updated>2017-03-01T12:21:45.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="thinkphp框架RBAC权限控制和auth权限控制类"><a href="#thinkphp框架RBAC权限控制和auth权限控制类" class="headerlink" title="thinkphp框架RBAC权限控制和auth权限控制类"></a>thinkphp框架RBAC权限控制和auth权限控制类</h2><p>去某家公司面试，技术面试官提出一个关于RBAC的问题，想了很久没能答上来，可想而知面试的结果会怎样，但问题仍然存在，什么是RBAC权限控制？</p>
<p>回家后突然想起来，RBAC的英文Role Based Access Control 的缩写，中文是基于角色的权限管理，相比这个概念并不陌生，项目中权限管理是必不可少的一环，而公司框架本身早就封装好了该功能，实际开发中很少会二次开发，因此有些生疏。回去查了资料，得知TP框架中的RBAC类是3.1支持的写法，到了更优秀的版本3.2后，TP官方去除了此方法，封装了一个更加简洁的类（auth类）。看到这就不再陌生了，因为我一开始接触的TP版本就是3.2，很早以前使用过auth类，并不陌生，真是有点好笑，只知诸葛亮，不知诸葛孔明。</p>
<p>RBAC权限管理种，用户通过角色与权限进行关联[其架构灵感来源于操作系统的GBAC（GROUP-Based Access Control）的权限管理控制]。简单的来说，一个用户可以拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。</p>
<p><img src="http://www.lyblog.net/usr/uploads/2014/09/image9.png" alt=""></p>
<p>在许多的实际应用中，系统不只是需要用户完成简单的注册，还需要对不同级别的用户对不同资源的访问具有不同的操作权限。且在企业开发中，权限管理系统也成了重复开发效率最高的一个模块之一。而在多套系统中，对应的权限管理只能满足自身系统的管理需要，无论是在数据库设计、权限访问和权限管理机制方式上都可能不同，这种不致性也就存在如下的憋端：</p>
<p>维护多套系统，重复造轮子，时间没用在刀刃上<br>用户管理、组织机制等数据重复维护，数据的完整性、一致性很难得到保障<br>权限系统设计不同，概念理解不同，及相应技术差异，系统之间集成存在问题，单点登录难度大，也复杂的企业系统带来困难<br>RBAC是基于不断实践之后，提出的一个比较成熟的访问控制方案。实践表明，采用基于RBAC模型的权限管理系统具有以下优势：由于角色、权限之间的变化比角色、用户关系之间的变化相对要慢得多，减小了授权管理的复杂性，降低管理开销；而且能够灵活地支持应用系统的安全策略，并对应用系统的变化有很大的伸缩性；在操作上，权限分配直观、容易理解，便于使用；分级权限适合分层的用户级形式；重用性强。</p>
<p><strong>更多关于thikphpRBA详细的配置使用过程，均可参考如下地址，作者写的十分详细</strong> <a href="https://www.lyblog.net/detail/552.html" target="_blank" rel="external">跳转到此</a></p>
<p>TP框架3.1版本种RBAC类虽然功能完善，但是许多人觉得配置起来十分麻烦，于是到了3.2的时代，auth类就应运而生了。</p>
<p>TP内置的auth权限类位于：<code>/ThinkPHP/Library/Think/Auth.class.php</code>,执行里面的sql生成3张表<code>auth_rule</code>、<code>auth_group</code>、<code>auth_group_access</code>；<br>然后自己再建一张users表；当然起其他的名字也是可以的；不过是需要在配置项中说明；</p>
<p>先对各表的作用简单介绍；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">users：用户表；</div><div class="line">auth_group：用户组表；比如说超级管理员组、普通管理员组、编辑等等；同时记录每个管理组有哪些权限；</div><div class="line">auth_group_access：用户、群组关联表；比如说用户1属于超级管理员、用户2属于普通管理员和编辑；</div><div class="line">auth_rule：权限表；具体的每条权限是什么；</div></pre></td></tr></table></figure>
<p>如果还没看过权限管理；那建议先看源代码；透彻学习一样东西；最好的方法就是研究源代码；<br>这里重点不是要讲auth的原理；而是要给一个auth的demo；</p>
<p>git源代码：<a href="https://github.com/baijunyao/thinkphp-bjyadmin" target="_blank" rel="external">https://github.com/baijunyao/thinkphp-bjyadmin</a></p>
<p>1：先下载项目并安装；<br>完成后分别点超级管理员登录和文章管理员登录；<br>你会发现他们的权限是不同的；看到的后台菜单是不一样的； </p>
<p><img src="http://baijunyao.com/Upload/image/ueditor/20160514/1463186682405819.jpg" alt=""></p>
<p>2：菜单管理</p>
<p><img src="http://baijunyao.com/Upload/image/ueditor/20160504/1462291919136306.jpg" alt=""></p>
<p>为了控制每种管理员都能看到那些菜单；所以要有菜单的管理；操作的是demo中的admin_nav表</p>
<p>3：权限管理</p>
<p><img src="http://baijunyao.com/Upload/image/ueditor/20160504/1462291929640930.jpg" alt=""></p>
<p>具体的每项权限的名称和内容；我这里一般都是和菜单对应的；但是会比菜单管理多出一些；对比两张图即可看出来；多出来的一般都是些对菜单的增删改；<br>操作的是demo中的auth_rule表；</p>
<p>4：用户组管理</p>
<p>！<a href="http://baijunyao.com/Upload/image/ueditor/20160504/1462291949928045.jpg" target="_blank" rel="external"></a></p>
<p>这里就是增加管理组；并为每个管理组分配权限了；选中的就表示有权限看到或者操作了；</p>
<p><img src="http://baijunyao.com/Upload/image/ueditor/20160504/1462291962384468.jpg" alt=""></p>
<p>5：管理员列表<br><img src="http://baijunyao.com/Upload/image/ueditor/20160514/1463186286405414.jpg" alt=""><br>把所有的管理员都列出来；可以添加管理员或者修改管理员的管理组；</p>
<p>![])(<a href="http://baijunyao.com/Upload/image/ueditor/20160514/1463186391769769.jpg" target="_blank" rel="external">http://baijunyao.com/Upload/image/ueditor/20160514/1463186391769769.jpg</a>)</p>
<p>当构建好这样一个结构后；权限管理简单其实只需要AdminBaseController.class.php中如下一段代码就完成了；</p>
<p>/Application/Common/Controller/AdminBaseController.class.php</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$auth=new \Think\Auth();</div><div class="line">$rule_name=MODULE_NAME.&apos;/&apos;.CONTROLLER_NAME.&apos;/&apos;.ACTION_NAME;</div><div class="line">$result=$auth-&gt;check($rule_name,$_SESSION[&apos;user&apos;][&apos;id&apos;]);</div><div class="line">if(!$result)&#123;</div><div class="line">    $this-&gt;error(&apos;您没有权限访问&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也是在 thinkphp的目录结构设计经验总结中讲述 /Application/Common/Controller中建各种BaseController的原因；</p>
<blockquote>
<p>是不是感觉很简洁，几行代码就解决问题了。~~</p>
</blockquote>
<p>注：关于RBAC详细的视频教程，在以下链接可以找到,<a href="http://www.thinkphp.cn/topic/3425.html" target="_blank" rel="external">雪狐网基于ThinkPHP3.1.3版本框的RBAC权限管理视频教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;thinkphp框架RBAC权限控制和auth权限控制类&quot;&gt;&lt;a href=&quot;#thinkphp框架RBAC权限控制和auth权限控制类&quot; class=&quot;headerlink&quot; title=&quot;thinkphp框架RBAC权限控制和auth权限控制类&quot;&gt;&lt;/a&gt;th
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ThinkPHP" scheme="https://jeristiano.github.io/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】 为程序员准备的十款最好的IDE编辑器</title>
    <link href="https://jeristiano.github.io/2017/02/28/%E8%AF%91-%E4%B8%BA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%87%86%E5%A4%87%E7%9A%84%E5%8D%81%E6%AC%BE%E6%9C%80%E5%A5%BD%E7%9A%84IDE%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://jeristiano.github.io/2017/02/28/译-为程序员准备的十款最好的IDE编辑器/</id>
    <published>2017-02-28T11:20:27.000Z</published>
    <updated>2017-03-01T13:30:09.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为程序员准备的十款最好的IDE编辑器"><a href="#为程序员准备的十款最好的IDE编辑器" class="headerlink" title="为程序员准备的十款最好的IDE编辑器"></a>为程序员准备的十款最好的IDE编辑器</h2><hr>
<blockquote>
<p>mood’s down and messed up, maybe translating article form english website  could make me feel better </p>
<p>原文地址：<a href="http://noeticforce.com/best-php-ide-for-programmers-windows-and-mac" target="_blank" rel="external">http://noeticforce.com/best-php-ide-for-programmers-windows-and-mac</a></p>
</blockquote>
<p><img src="http://noeticforce.com/sites/default/files/best-php-ide.jpg" alt=""></p>
<p>php编程要亲历亲为所有的设置吗？php编程首先需要一个IDE（集成开发环境）编辑器，市面上有很多IDE编辑器，包括免费的和收费的，挑选起来有些困难。</p>
<p>处于业余开爱好，使用notepad这样基本的编辑器也是可以的，但对于职业的web开发来说，最好还是使用功能更加强大的PHP IDE编辑器，像NetBeans ，PHPStorm, VIM, Zend Studio, Cloud9 或 Atom等。</p>
<p>一款优秀的IDE编辑器通常有大量的特性，帮助开发者快捷高效的开发，集成开发环境（IDE）就是开发者的‘金刚钻’，花点时间选择一款满足需求的编辑器吧。</p>
<p>选择哪一款呢？这往往取决于你的需求，偏好，和购买能力，做决定前多试几款不失为上策。</p>
<p>有许多IDE编辑器是免费的，跨平台包括windows，Mac，Linux。如果你是一个web开发新手，打算学习PHP，我推荐使用以下几款免费的IDE编辑器，如：Netbeans，VIM<br>,Atom,或 Eclipse PDT。</p>
<p>企业和职业开发者也可以使用这些免费IDE完成工作，但是许多商业版本或更加高级IDE，由于不断的技术支持和更多现代的特性，同样受到了企业的欢迎。其中包括，PHPStorm, Sublime Text, Zend Studio, Nusphere, PHPED, PHP Designer 和 Cloud 9等等。</p>
<p>接下来，让我们细陈，这些功能丰富，颇受欢迎，功能很炫的，被全世界PHP开发者公认最好的10款PHP IDE。</p>
<h3 id="1-NetBeans-最好的PHP-IDE-免费版本"><a href="#1-NetBeans-最好的PHP-IDE-免费版本" class="headerlink" title="1. NetBeans - 最好的PHP IDE (免费版本)"></a>1. NetBeans - 最好的PHP IDE (免费版本)</h3><p>NetBeans是大众使用的PHP IDE，功能丰富、免费并且支持多国语言，包括英语、日语、俄语、巴西葡萄牙语以及简体中文。免费版本的发布于2010年，Sun公司开始将其作为开源项目发展，后来Sun被Oracle收购。</p>
<p>自发布以来，NetBeans的下载量已超过1800万次，同时拥有一个生机勃勃的致力于开源集成开发环境的开发者社区。</p>
<p>现在的Netbeans已经不是那个使用量小仅限于java开发的编辑器了，当前稳定版的Netbeans体量轻，更加快速，完美支持PHP。对于像Zend、Doctrine、 Smarty和Symfony2一类的流行PHP框架以及像Yii、CakePHP、 FuelPHP和Wordpress CMS一类的其它框架提供了开箱即用的支持，也通过laravel-ide-helper提供了对Laravel框架的开箱即用支持。</p>
<p>让NetBeans位居榜首的关键特性是拥有很多代码生成工具，像<strong>getter setter生成、代码模板、智能代码补全、提示、快速修复和重构等</strong>。另外还支持一些基本特性，包括代码折叠和格式化、try/catch代码补全以及矩形选区等</p>
<p>调试时，你可以在本地或者远程使用命令行和xDebug。NetBeans PHP编辑器对包括 javascript、HTML和CSS等web开发都提供了开箱即用的支持。所有这些特性轻而易举地使得NetBeans成为<strong>最好的开源PHP IDE。</strong></p>
<p>下一个版本计划在2016年8月发布，完全支持php7.</p>
<h3 id="2-PHPStorm-最好的PHP-IDE-商业版本"><a href="#2-PHPStorm-最好的PHP-IDE-商业版本" class="headerlink" title="2. PHPStorm- 最好的PHP IDE (商业版本)"></a>2. PHPStorm- 最好的PHP IDE (商业版本)</h3><p>PHPStorm是十分全面的PHP IDE,其最现代化的特性，使得web开发变得十分快速。它由JetBrains公司开发和发行。近十五年以来的开发工具市场，该公司最受开发者热爱，它使得编写代码更加轻松和愉快。</p>
<p>PHPStorm很好的支持主流的框架，像Symfony, Zend Framework, Yii, CakePHP, Laravel，和 Drupal, Magento  Wordpress这样主流的CMS系统。<br>一些web开发项目是有前端技术的，这也是PHPStorm最耀眼的地方。 它几乎提供了所有前端技术的实时编辑功能比如CSS, Sass, HTML5, CoffeeScript, TypeScript, JavaScript, Stylus, Less等等。同时还支持代码重构，调试和单元测试。<br>谈到开发者工具，它集成了版本控制系统，sql数据库，composer, 远程部署，vagrant，其他的客户端，命令行工具等，几乎无所不包。</p>
<p>代码调试方面，它同时支持本地和远程的Zend Debugger 和 Xdebug。</p>
<p>PHPStorm是企业级IDE, 需要授权费用，主要的目标是专业的开发人员，但同时为教师，学生或开源的项目免费提供。</p>
<p>PHPStorm的普及程度可以从如下事实衡量，众多的大公司如Expedia,Yahoo, Cisco, Salesforce 和wikipedia都曾购买过PHPStorm IDE。</p>
<p>你可以在以下地址下载PHPStorm试用版 (免费30天） – <a href="https://www.jetbrains.com/phpstorm/download/#section=windows-version" target="_blank" rel="external">Download PHPStorm trial version</a>.</p>
<p>你想了解更多的PHPStom请登录官网 –<a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="external">jetbrains.com/phpstorm</a> </p>
<h3 id="3-Sublime-Text-3-PHP-IDE"><a href="#3-Sublime-Text-3-PHP-IDE" class="headerlink" title="3. Sublime Text 3 / PHP IDE"></a>3. Sublime Text 3 / PHP IDE</h3><p>Sublime Text 3 是我最喜欢之一，一直是最强文本编辑器强有力竞争者。它轻量级，拥有丰富的特性，还支持在Windows，OSX 和 Linux 上运行。 Sublime text 通过插件和包构建驱动。</p>
<p>有许多 PHP 的外部包，使得这个优雅的编辑器变成一个优雅的 Sublime PHP IDE。这些著名和使用的包有——package control，Sublime PHP companion， xDebug client——CodeBug， PHPCS， CodIntel， Simple PHPUnit 和 PHPDoc。</p>
<p>一旦你安装 sublime text 3 当作 PHP IDE使用， 添加一些有用的包，你将感受 sublime text的优雅，和PHP开发的强大。</p>
<p>关于 Sublime Text，你可以在这里<a href="https://www.sublimetext.com/" target="_blank" rel="external">sublimetext.com</a>读到更多</p>
<h3 id="4-Eclipse-PDT"><a href="#4-Eclipse-PDT" class="headerlink" title="4. Eclipse PDT"></a>4. Eclipse PDT</h3><p>Eclipse PDT (PHP Development Tools)是另一种免费的开源选择方案， Eclipse拥有庞大的开发者社区致力于开发各种各样的插件，这使得它与Storms PHP, NetBeans和Zend studio等顶级的开发IDE不分伯仲。</p>
<p>相比于商业版IDE，刚开始时需要多做一些工作，但你省下的钱，一切都是值得的。与PHPStorm和Zend Studio相较，Eclipse PDT节省授权费是一个很大的优势。如果你是传统的Eclipse爱好者，使用Eclipse PDT会使你感觉很自在。</p>
<p>有的人会说Eclipse会很慢，说实话如果你的系统配置很烂，付费版的产品相较于Eclipse会表现得更好。然而，现在基本的笔记本配置已经能够让Eclipse足够快的运行而不拖你的后腿。</p>
<p>它关键的特性包括： 语法高亮(syntax highlighting), 代码提示(code assist),  代码格式化(code formatter), 重构(refactoring), 代码模版(code templates), 代码导航(code navigation),  php调试(php debugging), 语法验证(syntax validation) 并且拥有一个庞大的社区的eclipse生态系统来支持它。</p>
<p>开始使用时，你可以下载专用于PHP开发的Eclipse包，它包含了PHP语言支持，XML编辑器，Git客户端和 Mylyn。软件能够在Mac OS X, Windows 和 Linux系统下下载并使用。</p>
<h3 id="5-VIM"><a href="#5-VIM" class="headerlink" title="5. VIM"></a>5. VIM</h3><p>VIM 遵循GPL授权协议，是一款免费下载使用的开源文本编辑器。在开发社区内非常的流行.是最先进的文本编辑器之一.Facebook的工程师早先一直都是使用VIM来编写他们的PHP代码，后来他们转向了自己的语言hack。</p>
<p>我们知道VIM作为一款优秀文本编辑器具有众多的特性，但当你仔细的配置完成后，它提供了不亚于完全成熟的 PHP 开发环境以适用于你的PHP开发。</p>
<p>如果你是只喜欢用键盘工作， VIM就很适合你，它模块化，轻量并且快速。</p>
<p>要找一款 Linux下的PHP IDE，VIM 就是你要找的并且它的理念与Sublime Text 3相似， VIM也需要插件来转化成像 PHPStorm 或Netbeans一样的IDE， 最开始你需要花费大量的工作来配置大量的插件，但在最后成功后你会发现一切都是值得的。</p>
<p>VIM显然应该被算做是一款免费的PHP IDE。 你可以在 <a href="http://www.vim.org/" target="_blank" rel="external">vim.org</a>上了解更多！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为程序员准备的十款最好的IDE编辑器&quot;&gt;&lt;a href=&quot;#为程序员准备的十款最好的IDE编辑器&quot; class=&quot;headerlink&quot; title=&quot;为程序员准备的十款最好的IDE编辑器&quot;&gt;&lt;/a&gt;为程序员准备的十款最好的IDE编辑器&lt;/h2&gt;&lt;hr&gt;
&lt;blo
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="翻译" scheme="https://jeristiano.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RT:截取中文字符串无乱码</title>
    <link href="https://jeristiano.github.io/2017/02/21/%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%A0%E4%B9%B1%E7%A0%81/"/>
    <id>https://jeristiano.github.io/2017/02/21/截取中文字符串无乱码/</id>
    <published>2017-02-21T04:56:32.000Z</published>
    <updated>2017-02-21T05:06:47.812Z</updated>
    
    <content type="html"><![CDATA[<p> UTF-8中文截取函数<br>在PHP中，substr()函数截取带有中文字符串的话，可能会出现乱码，这是因为中西文一个字节所占有的字节数不一样，而substr的长度参数是按照字节去算的，在GB2312编码时，一个中文占2个字节，英文为1个字节，而在UTF-8编码当中，一个中文可能占有2个或3个字节，英文或半角标点占1字节。<br>解决方法<br>UTF-8编码的字符可能由1-3个字节组成，具体数目可以由第一个字节判断出来。<br>第一个字节大于224的，它与它之后的2个字节一起组成一个UTF-8字符<br>第一个字节大于192小于224的，它与它之后的1个字节组成一个UTF-8字符，否则第一个字节本身就是一个英文字符（包括数字和一小部分标点符号）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a=&quot;我是程序员&quot;;</div><div class="line">class Dx</div><div class="line">&#123;</div><div class="line"> </div><div class="line">   private $str;</div><div class="line">    public function msubstr($string,$start,$length)</div><div class="line">    &#123;</div><div class="line">        if(strlen($string)&gt;$length)</div><div class="line">        &#123;</div><div class="line">            $n=0;</div><div class="line">            $str=&quot;&quot;;</div><div class="line">            $len=$start+$length;</div><div class="line">            for($i=$start;$i&lt;$len;$i++)</div><div class="line">            &#123;</div><div class="line">                if(ord(substr($string,$n,1))&gt;224)</div><div class="line">                &#123;</div><div class="line">                    $str.=substr($string,$n,3);</div><div class="line">                    $n+=3;</div><div class="line">                    $i++;</div><div class="line">                &#125;</div><div class="line">                elseif(ord(substr($string,$n,1))&gt;192)</div><div class="line">                &#123;</div><div class="line">                    $str.=substr($string,$n,2);</div><div class="line">                    $i++;</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    $str.=substr($string,$n,1);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return $str;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            return $string;</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    public function msub($string,$start,$length)</div><div class="line">    &#123;</div><div class="line">        if(strlen($string)&gt;$length)</div><div class="line">        &#123;</div><div class="line">            $str=&quot;&quot;;</div><div class="line">            $len=$start+$length;</div><div class="line">            for($i=$start;$i&lt;$len;$i++)</div><div class="line">            &#123;</div><div class="line">                if(ord(substr($string,$i,1))&gt;0xa0)</div><div class="line">                &#123;</div><div class="line">                    $str.=substr($string,$i,2);</div><div class="line">                    $i++;</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    $str.=substr($string,$i,1);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return $str;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            return $string;</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$sub = new Dx();</div><div class="line">echo $sub-&gt;msubstr($a,0,8);//我是程序</div><div class="line">?&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">除了上面的方法，还可以使用mb_substr来解决，代码如下：</div><div class="line">&lt;?php</div><div class="line">$a=&quot;wo的name是中国！&quot;;</div><div class="line">echo mb_substr($a,0,9,&apos;UTF-8&apos;);//wo的name是中</div><div class="line">echo substr($a,0,15);//wo的name是中</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; UTF-8中文截取函数&lt;br&gt;在PHP中，substr()函数截取带有中文字符串的话，可能会出现乱码，这是因为中西文一个字节所占有的字节数不一样，而substr的长度参数是按照字节去算的，在GB2312编码时，一个中文占2个字节，英文为1个字节，而在UTF-8编码当中，一
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="php基础" scheme="https://jeristiano.github.io/tags/php%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【译】放弃PHP的代价太高</title>
    <link href="https://jeristiano.github.io/2017/02/15/%E3%80%90%E8%AF%91%E3%80%91%E6%94%BE%E5%BC%83PHP%E7%9A%84%E4%BB%A3%E4%BB%B7%E5%A4%AA%E5%A4%A7%E4%BA%86/"/>
    <id>https://jeristiano.github.io/2017/02/15/【译】放弃PHP的代价太大了/</id>
    <published>2017-02-15T03:57:03.000Z</published>
    <updated>2017-02-15T08:35:47.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="放弃-PHP-代价太高"><a href="#放弃-PHP-代价太高" class="headerlink" title="放弃 PHP 代价太高"></a>放弃 PHP 代价太高</h2><h4 id="原文：Leaving-PHP-is-too-expensive"><a href="#原文：Leaving-PHP-is-too-expensive" class="headerlink" title="原文：Leaving PHP is too expensive"></a>原文：Leaving PHP is too expensive</h4><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我首次编程使用的语言就是PHP,我工作过许多家公司都把PHP 作为主要的开发语言,然而,其他语言的出现,我不能视而不见,现在PHP已不再是我主要的开发语言了.</p>
<p>我是一个快乐的人,相比于”轻松赚钱和尽快地完成工作”而言,我并不过分关心语言的设计.最近我辞去了一份全职php开发的工作,我现在的职业是前端开发者.</p>
<p>我最近阅读了一篇博客《 Eevee, PHP: 糟糕设计的分形 》文章很老,言辞激烈令人不适,我已经无法忽视它的存在。我这篇文章就是告诉人们为什么我很难离开PHP。</p>
<h3 id="业余项目的经济问题"><a href="#业余项目的经济问题" class="headerlink" title="业余项目的经济问题"></a>业余项目的经济问题</h3><p>我现在自由,如果我不想,我不需要写一行PHP代码,也不再从事后端开发,除非浏览器发生急剧转变,否则我不需要那么关注未来。</p>
<p>然而，业余时间,我想要开发项目,实现一些我的想法,而且不止一个,事实上,我正在尝试开发个轻量级的网站,获得满意的收入(我的目标),同时,昨晚我开始了第一个未命名的网站开发计划.</p>
<p>不幸的是,由于这个项目自己掏钱并且还需要建立很多站点,许多选择不得不放弃,我将举些列子来说明,为什么主机提供商不会为我以及我和处境相同的人提供帮助.</p>
<h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>如果经济条件允许,我就会把所有的应用放在Heroku运行,Heroku是我使用过的主机里,体验超级好的一家。托管,本地环境配置,语言等都不麻烦.</p>
<p>Heroku的问题在于他的定价模式，尽管每个项目7美元并不算多,但如果你有多个项目时,费用就飞速上升了,10个应用成本一下蹿升到70美元,对于这些可能没有意义的项目来说,每个月的花费太过高昂。</p>
<p>以上还没考虑哦1000万行数据额外付9美元的数据库使用成本,如果项目是有很大的访问量,那也会增加应用的成本,最后每个月都100多美元。</p>
<h3 id="Amazon-web-services"><a href="#Amazon-web-services" class="headerlink" title="Amazon web services"></a>Amazon web services</h3><p> AWS看起来要便宜许多,但我一直都感觉它在许多方便增加了使用的复杂度,就配置和成本来说,它真的不是适合每月只有几百访问量的小网站.</p>
<p> 配置AWS上,我没有太多的经验,但是围绕这个产品,我感觉它有一股企业般的味道,他们更加关心那些拥有复杂应用的大客户。</p>
<p> 或者,我们值得学习如何在AWS上高效地部署,但怎样简单的使用git去部署它呢?为了部署它,我需要额外的服务吗?相同的实例可以在多个应用中运行吗?收费模式是怎样的?尽管根据上面的链接页面看了价格费用,但仍我不明白,哪块是跟我相关,访问他们的网站让我产生了太多的疑问.</p>
<h3 id="Microsoft-Azure"><a href="#Microsoft-Azure" class="headerlink" title="Microsoft Azure"></a>Microsoft Azure</h3><p> 一眼看去,Azure看起来像救世主,但是,在大型项目上使用它,一个问题绕不过去,Google和HTTPS。</p>
<p> <img src="http://static.oschina.net/uploads/img/201602/17155945_QFix.jpg" alt=""></p>
<p>  更加明智的做法是,看下它的定价模式(图片是瑞典语),如果你选择了标准版,你可以部署50个APP,我更倾向于标准版,每月580克朗,折合70欧元,虽然仍然有点贵,但在Heroku上,我喜欢的特性,它都具备。虽然复杂了一点,并且价格模式经常变化,但仍然很不错。</p>
<p>  标准版定价的问题在于5个SNI((Server Name Indication),我理解的意思是,只能有5个站点支持SSL,由于,谷歌一直打击没有SSL证书的站点,并且,Let’ encrypt 项目使得每个有SSL证书的站点都可轻松的加密。我5个站点支持不太好。以上是我简单的理解，可以找到的说明不多，也许我错了，事实上，我倒是希望我错了，如果我错了，请在评论区告我。</p>
<h3 id="GleSYS-Digital-Ocean-Linode-自己的服务器"><a href="#GleSYS-Digital-Ocean-Linode-自己的服务器" class="headerlink" title="GleSYS, Digital Ocean, Linode, 自己的服务器"></a>GleSYS, Digital Ocean, Linode, 自己的服务器</h3><p>  唯一可靠的方案是到以上的服务商租用一台VPS, 关于的GleSYS好消息是,他有瑞典的主机,那意味着更低延时,并且数据没有风险的通过美国政府的审查,我可以放心的储存用户数据.</p>
<p>  相比于托管服务,它价格十分低廉,就是需要些时间,你必须亲自配置许多方面,工作量很大,这也是我倾向选择托管服务的最重要的原因。当我正在工作,突然有一个服务器挂了,我可没有时间恢复它,直到我回家了,那可能是8个小时后的事了.</p>
<h3 id="PHP社区提供解决方案"><a href="#PHP社区提供解决方案" class="headerlink" title="PHP社区提供解决方案"></a>PHP社区提供解决方案</h3><p>  当Eevee 抱怨PHP这们语言缺乏特性的时候,社区已经给出了最好的的主机托管方案,我已经试过了,这也是我用过的最便宜的解决方案.</p>
<p>  解决方案是 <a href="https://forge.laravel.com/" target="_blank" rel="external">laravel forge</a></p>
<p>  如果你没有立即访问这个链接,我来解释下,Laravel Forge服务9美元/月,提供无限制的生产环境的PHP服务器(安装,设置,配置),并且可以通过web面板控制它,更令人惊喜的是,我可以针对任何VPS提供商,即使是AWS或者数字海洋,都什么简单.它可以帮助你扩展服气,设置cronjobs,编辑环境配置,使用git push 部署等等.</p>
<p>  Laravel Forge服务提供了给我所有Azure或HeroHu的良好特性,不限应用数量（只要VPS可以处理它）。Laravel Forge不限于Laravel框架，任何PHP应用程序都行。</p>
<p>对Eevee这样的人来说，本条不能改变你对PHP社区的观念的话，就没什么能了。但认真说，知道这个的人怎么会离开这么厉害的服务呢？</p>
<h3 id="精打细算"><a href="#精打细算" class="headerlink" title="精打细算"></a>精打细算</h3><p>我的经历十分常见,我并不孤独,世界范围内,数以百万计的小公司需要主机托管应用,或者那些人的私人项目正是网站.</p>
<p>假设你不想做启动服务器,运行,安装证书的等运维工作,10美元的Linode加上9美元的Laravel Forge服务是最佳的选择—-快速并且又便宜</p>
<p>我在网上研究过答案，唯一可行的替代方案就是使用类似于Codeship的持续集成(Continuous Integration)服务。它的服务也不错，然而它不是无限的,当你拥有超过5个项目（我大概要超过）的时候费用直接提高到49美元。另外，Codeship还提供自动化测试以及git推送部署服务，但它<strong>不提供服务器</strong>，所以你仍需要自行设置网站服务器、数据库并配置好。</p>
<p>对于其他语言，又Laravel Forge有这样的替代方案，也许没有。但我认为，对我以及很多其他人来说，放弃PHP代价实在太高了。即使我能担负那个费用,也没有理由那么做。</p>
<p>引用Eevee的话说:</p>
<pre><code>毫无疑问,PHP太流行了!
</code></pre><p>Translated by JeremyKuang</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;放弃-PHP-代价太高&quot;&gt;&lt;a href=&quot;#放弃-PHP-代价太高&quot; class=&quot;headerlink&quot; title=&quot;放弃 PHP 代价太高&quot;&gt;&lt;/a&gt;放弃 PHP 代价太高&lt;/h2&gt;&lt;h4 id=&quot;原文：Leaving-PHP-is-too-expensi
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="翻译" scheme="https://jeristiano.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>GIT常用命令备忘</title>
    <link href="https://jeristiano.github.io/2017/02/14/GIT%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>https://jeristiano.github.io/2017/02/14/GIT常用命令备忘/</id>
    <published>2017-02-14T05:18:50.000Z</published>
    <updated>2017-02-14T05:55:08.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载:原文出处<a href="http://stormzhang.com/git/2014/01/27/git-common-command/" target="_blank" rel="external">http://stormzhang.com/git/2014/01/27/git-common-command/</a></p>
</blockquote>
<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;storm&quot;</div><div class="line">git config --global user.email &quot;stormzhang.dev@gmail.com&quot;</div><div class="line">git config --global color.ui true</div><div class="line">git config --global alias.co checkout  # 别名</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global core.editor &quot;vim&quot;  # 设置Editor使用vim</div><div class="line">git config --global core.quotepath false # 设置显示中文文件名</div></pre></td></tr></table></figure>
<p><code>用户的git配置文件~/.gitconfig</code></p>
<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><p><code>查看、添加、提交、删除、找回，重置修改文件</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">git help &lt;command&gt;  # 显示command的help</div><div class="line">git show            # 显示某次提交的内容</div><div class="line">git show $id</div><div class="line"></div><div class="line">git co  -- &lt;file&gt;   # 抛弃工作区修改</div><div class="line">git co  .           # 抛弃工作区修改</div><div class="line"></div><div class="line">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</div><div class="line">git add .           # 将所有修改过的工作文件提交暂存区</div><div class="line"></div><div class="line">git rm &lt;file&gt;       # 从版本库中删除文件</div><div class="line">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</div><div class="line"></div><div class="line">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</div><div class="line">git reset -- .      # 从暂存区恢复到工作文件</div><div class="line">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class="line"></div><div class="line">git ci &lt;file&gt;</div><div class="line">git ci .</div><div class="line">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</div><div class="line">git ci -am &quot;some comments&quot;</div><div class="line">git ci --amend      # 修改最后一次提交记录</div><div class="line"></div><div class="line">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</div><div class="line">git revert HEAD     # 恢复最后一次提交的状态</div></pre></td></tr></table></figure>
<p><code>查看文件diff</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</div><div class="line">git diff</div><div class="line">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class="line">git diff --staged   # 比较暂存区和版本库差异</div><div class="line">git diff --cached   # 比较暂存区和版本库差异</div><div class="line">git diff --stat     # 仅仅比较统计信息</div></pre></td></tr></table></figure>
<p><code>查看提交记录</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git log</div><div class="line">git log &lt;file&gt;      # 查看该文件每次提交记录</div><div class="line">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</div><div class="line">git log -p -2       # 查看最近两次详细</div></pre></td></tr></table></figure>
<p>tig</p>
<p>Mac上可以使用tig代替diff和log，brew install tig</p>
<h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><p><code>查看、切换、创建和删除分支</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git br -r           # 查看远程分支</div><div class="line">git br &lt;new_branch&gt; # 创建新的分支</div><div class="line">git br -v           # 查看各个分支最后提交信息</div><div class="line">git br --merged     # 查看已经被合并到当前分支的分支</div><div class="line">git br --no-merged  # 查看尚未被合并到当前分支的分支</div><div class="line"></div><div class="line">git co &lt;branch&gt;     # 切换到某个分支</div><div class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</div><div class="line">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</div><div class="line"></div><div class="line">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class="line">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</div><div class="line"></div><div class="line">git br -d &lt;branch&gt;  # 删除某个分支</div><div class="line">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div></pre></td></tr></table></figure>
<p><code>分支合并和rebase</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</div><div class="line">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</div><div class="line"></div><div class="line">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</div><div class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>
<p><code>Git补丁管理(方便在多台机器上开发同步时用)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff &gt; ../sync.patch         # 生成补丁</div><div class="line">git apply ../sync.patch          # 打补丁</div><div class="line">git apply --check ../sync.patch  # 测试补丁能否成功</div></pre></td></tr></table></figure>
<p><code>Git暂存管理</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git stash                        # 暂存</div><div class="line">git stash list                   # 列所有stash</div><div class="line">git stash apply                  # 恢复暂存的内容</div><div class="line">git stash drop                   # 删除暂存区</div><div class="line">git stash clear</div></pre></td></tr></table></figure>
<p><code>Git远程分支管理</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">git pull                         # 抓取远程仓库所有分支更新并合并到本地</div><div class="line">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class="line">git fetch origin                 # 抓取远程仓库更新</div><div class="line">git merge origin/master          # 将远程主分支合并到本地当前分支</div><div class="line">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</div><div class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</div><div class="line"></div><div class="line">git push                         # push所有分支</div><div class="line">git push origin master           # 将本地主分支推到远程主分支</div><div class="line">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class="line">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</div><div class="line">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div></pre></td></tr></table></figure>
<p><code>Git远程仓库管理</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git remote -v                    # 查看远程服务器地址和仓库名称</div><div class="line">git remote show origin           # 查看远程服务器仓库状态</div><div class="line">git remote add origin git@github:stormzhang/demo.git         # 添加远程仓库地址</div><div class="line">git remote set-url origin git@github.com:stormzhang/demo.git # 设置远程仓库地址(用于修改远程仓库地址</div></pre></td></tr></table></figure>
<p><code>创建远程仓库</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</div><div class="line">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</div><div class="line"></div><div class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class="line">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</div><div class="line">git push -u origin master                                      # 客户端首次提交</div><div class="line">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</div><div class="line"></div><div class="line">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</div></pre></td></tr></table></figure>
<p><code>也可以命令设置跟踪远程库和本地库</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream master origin/master</div><div class="line">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载:原文出处&lt;a href=&quot;http://stormzhang.com/git/2014/01/27/git-common-command/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stormzhang.c
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="git" scheme="https://jeristiano.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>laravel笔记之laravel 安装和数据迁移填充</title>
    <link href="https://jeristiano.github.io/2017/02/10/laravel%E7%AC%94%E8%AE%B0%E4%B8%80-laravel-%E5%AE%89%E8%A3%85%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%A1%AB%E5%85%85/"/>
    <id>https://jeristiano.github.io/2017/02/10/laravel笔记一-laravel-安装和数据迁移填充/</id>
    <published>2017-02-10T08:58:44.000Z</published>
    <updated>2017-02-10T09:06:43.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本教程示例代码见：<a href="https://github.com/johnlui/Learn-Laravel-5" target="_blank" rel="external">https://github.com/johnlui/Learn-Laravel-5</a></p>
</blockquote>
<p>在任何地方卡住，最快的办法就是去看示例代码。</p>
<h3 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>许多人被拦在了学习 Laravel 的第一步：安装。并不是因为安装有多复杂，而是因为【众所周知的原因】。在此我推荐一个 composer 全量中国镜像：<a href="http://pkg.phpcomposer.com/" target="_blank" rel="external">http://pkg.phpcomposer.com/</a> 。启用 Composer 镜像服务作为本教程的第一项小作业请自行完成哦。</p>
<p>镜像配置完成后，在终端（Terminal 或 CMD）里切换到你想要放置该网站的目录下（如 C:\wwwroot、/Library/WebServer/Documents/、/var/www/html、/etc/nginx/html 等），运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project laravel/laravel learnlaravel5 5.2.31</div></pre></td></tr></table></figure>
<p>然后，稍等片刻，当前目录下就会出现一个叫 learnlaravel5 的文件夹，安装完成啦~</p>
<h4 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h4><p>为了尽可能地减缓学习曲线，推荐宝宝们使用 PHP 内置 web 服务器驱动我们的网站。运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd learnlaravel5/public</div><div class="line">php -S 0.0.0.0:1024</div></pre></td></tr></table></figure>
<p>这时候访问 <a href="http://127.0.0.1:1024" target="_blank" rel="external">http://127.0.0.1:1024</a> 就是这个样子的：</p>
<p><img src="https://camo.githubusercontent.com/813c1698e040f3b29cd92f763e6ce1e2dd29c03f/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323831303139323130342e6a7067" alt="laravel5"></p>
<p>我在本地 hosts 中绑定了 fuck.io 到 127.0.0.1，所以截图中我的域名是 fuck.io 而不是 127.0.0.1，其实他们是完全等价的。</p>
<p>这时候你可能要问了：为什么本宝宝的页面是一片空白？请使用开发者工具查看网络请求，只要是 200 状态就说明运行成功了，空白是因为这个页面引用了 Google Fonts，你懂的~</p>
<p>至于为什么选择 1024 端口？因为他是 *UNIX 系统动态端口的开始，是我们不需要 root 权限就可以随意监听的数值最小的端口。</p>
<p>另外，建议不熟悉 PHP 运行环境搭建的宝宝们不要轻易尝试使用 Apache 或 Nginx 驱动 Laravel，特别是在开启了 SELinux 的 Linux 系统上跑。关于 Laravel 在 Linux 上部署的大坑，本宝宝可能要单写一篇长文分享给宝宝们。</p>
<h4 id="3-体验牛逼闪闪的-Auth-系统"><a href="#3-体验牛逼闪闪的-Auth-系统" class="headerlink" title="3. 体验牛逼闪闪的 Auth 系统"></a>3. 体验牛逼闪闪的 Auth 系统</h4><p>Laravel 利用 PHP5.4 的新特性 trait 内置了非常完善好用的简单用户登录注册功能，适合一些不需要复杂用户权限管理的系统，例如公司内部用的简单管理系统。</p>
<p>激活这个功能非常容易，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:auth</div></pre></td></tr></table></figure>
<p>访问 <a href="http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：" target="_blank" rel="external">http://fuck.io:1024/login，如果你本地已经科学上网，那就能看到以下页面：</a><br><img src="https://camo.githubusercontent.com/1c989f7363771f11d916c5112066f3839b3a88aa/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632323936353739343437372e6a7067" alt="login"></p>
<ol>
<li>连接数据库</li>
</ol>
<p>接下来我们要连接数据库了，请自行准备好 MySQL 服务哦。</p>
<h5 id="a-修改配置"><a href="#a-修改配置" class="headerlink" title="a. 修改配置"></a>a. 修改配置</h5><p>不出意外的话，learnlaravel5 目录下已经有了一个 .env 文件，如果没有，可以复制一份 .env.example 文件重命名成 .env，修改下面几行的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DB_HOST=127.0.0.1</div><div class="line">DB_PORT=3306</div><div class="line">DB_DATABASE=laravel5</div><div class="line">DB_USERNAME=root</div><div class="line">DB_PASSWORD=root</div></pre></td></tr></table></figure>
<p>推荐新建一个名为 laravel5 的数据库，并且使用 root 账户直接操作，降低学习数据库的成本。</p>
<p>数据库配置好之后，在登录界面填写任意邮箱和密码，点击 Login，你应该会得到以下画面：<br><img src="https://camo.githubusercontent.com/8abbf525301bd53ec10368258e38e69b0174bd42/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032303236323138312e6a7067" alt="error"></p>
<p>它说 users 表不存在呀，接下来我们将见识 Laravel 另外一个实用特性。</p>
<h5 id="b-进行数据库迁移（migration）"><a href="#b-进行数据库迁移（migration）" class="headerlink" title="b. 进行数据库迁移（migration）"></a>b. 进行数据库迁移（migration）</h5><p>运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
<p>我们得到了如下结果：</p>
<p><img src="https://camo.githubusercontent.com/2e3c07b19fca3a3be7eb994beccbf2e44d1e3671/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632333032323136393039342e6a7067" alt="result"></p>
<p>数据库迁移成功！赶快打开 <a href="http://fuck.io:1024/home" target="_blank" rel="external">http://fuck.io:1024/home</a> 注册一个用户试试吧~</p>
<p>下图是本宝宝注册了一个 username 为 1 用户：</p>
<p><img src="http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14623689497675.jpg" alt="user1"></p>
<h5 id="c-migration-是啥？"><a href="#c-migration-是啥？" class="headerlink" title="c. migration 是啥？"></a>c. migration 是啥？</h5><p>打开 <code>learnlaravel5/database/migrations/2014_10_12_000000_create_users_table.php</code>文件，你肯定能一眼看出它的作用：用 PHP 描述数据库构造，并且使用命令行一次性部署所有数据库结构。</p>
<h4 id="5-使用-Laravel-的“葵花宝典”：Eloquent"><a href="#5-使用-Laravel-的“葵花宝典”：Eloquent" class="headerlink" title="5. 使用 Laravel 的“葵花宝典”：Eloquent"></a>5. 使用 Laravel 的“葵花宝典”：Eloquent</h4><p>Eloquent 是 Laravel 的 ORM，是 Laravel 系统中最强大的地方，没有之一。当初 Laravel 作者在开发第一版的时候花了整整三分之一的时间才搞出来 Eloquent。当然，“欲练此功，必先自宫”，Eloquent 也是 Laravel 中最慢的地方，迄今无法解决。（路由、自动载入、配置分散、视图引发的性能问题都通过缓存几乎彻底解决了）</p>
<p>当然，我们还是要承袭第一版教程中对 Eloquent ORM 的描述：鹅妹子英！</p>
<h5 id="a-Eloquent-是什么"><a href="#a-Eloquent-是什么" class="headerlink" title="a. Eloquent 是什么"></a>a. Eloquent 是什么</h5><p>Eloquent 是 Laravel 内置的 ORM 系统，我们的 Model 类将继承自 Eloquent 提供的 Model 类，然后，就天生具备了数十个异常强大的函数，从此想干啥事儿都是一行代码就搞定。</p>
<h5 id="b-怎么用？"><a href="#b-怎么用？" class="headerlink" title="b. 怎么用？"></a>b. 怎么用？</h5><p>我们使用 Artisan 工具新建 Model 类及其附属的 Migration 和 Seeder（数据填充）类。</p>
<p>运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:model Article</div></pre></td></tr></table></figure>
<p>去看看你的 app 目录，下面是不是多了一个 Article.php 文件？那就是 Artisan 帮我们生成的 Model 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App;</div><div class="line"></div><div class="line">use Illuminate\Database\Eloquent\Model;</div><div class="line"></div><div class="line">class Article extends Model</div><div class="line">&#123;</div><div class="line">    //</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此简洁有力的代码，隐藏了背后极高的难度和巨大的复杂度，让我们闭上眼睛，静静地感受 Laravel 的优雅吧 (～￣▽￣)～</p>
<h3 id="6-使用-Migration-和-Seeder"><a href="#6-使用-Migration-和-Seeder" class="headerlink" title="6. 使用 Migration 和 Seeder"></a>6. 使用 Migration 和 Seeder</h3><p>接下来我们生成对应 Article 这个 Model 的 Migration 和 Seeder。</p>
<h5 id="a-使用-artisan-生成-Migration"><a href="#a-使用-artisan-生成-Migration" class="headerlink" title="a. 使用 artisan 生成 Migration"></a>a. 使用 artisan 生成 Migration</h5><p>在 learnlaravel5 目录下运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_article_table</div></pre></td></tr></table></figure>
<p>成功之后打开 <code>learnlaravel5/database/migrations</code>，你会发现有一个名为 2<strong>*</strong>_create_article_table 的文件被创建了。我们修改他的 up 函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public function up()</div><div class="line">&#123;</div><div class="line">    Schema::create(&apos;articles&apos;, function(Blueprint $table)</div><div class="line">    &#123;</div><div class="line">        $table-&gt;increments(&apos;id&apos;);</div><div class="line">        $table-&gt;string(&apos;title&apos;);</div><div class="line">        $table-&gt;text(&apos;body&apos;)-&gt;nullable();</div><div class="line">        $table-&gt;integer(&apos;user_id&apos;);</div><div class="line">        $table-&gt;timestamps();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这几行代码描述的是 Article 对应的数据库中那张表的结构。Laravel 默认 Model 对应的表名是这个英文单词的复数形式，在这里，就是 articles。接下来让我们把 PHP 代码变成真实的 MySQL 中的数据表，运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
<p>执行成功后，articles 表已经出现在数据库里了：</p>
<p><img src="https://camo.githubusercontent.com/a7675080d45339266815b2802e11d685f97c777a/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373137313131323931372e6a7067" alt="article"></p>
<h5 id="b-使用-artisan-生成-Seeder"><a href="#b-使用-artisan-生成-Seeder" class="headerlink" title="b. 使用 artisan 生成 Seeder"></a>b. 使用 artisan 生成 Seeder</h5><p>Seeder 是我们接触到的一个新概念，字面意思为播种机。Seeder 解决的是我们在开发 web 应用的时候，需要手动向数据库中填入假数据的繁琐低效问题。</p>
<p>运行以下命令创建 Seeder 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:seeder ArticleSeeder</div></pre></td></tr></table></figure>
<p>我们会发现 learnlaravel5/database/seeds 里多了一个文件 ArticleSeeder.php，修改此文件中的 run 函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public function run()</div><div class="line">&#123;</div><div class="line">    DB::table(&apos;articles&apos;)-&gt;delete();</div><div class="line"></div><div class="line">    for ($i=0; $i &lt; 10; $i++) &#123;</div><div class="line">        \App\Article::create([</div><div class="line">            &apos;title&apos;   =&gt; &apos;Title &apos;.$i,</div><div class="line">            &apos;body&apos;    =&gt; &apos;Body &apos;.$i,</div><div class="line">            &apos;user_id&apos; =&gt; 1,</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们把 ArticleSeeder 注册到系统内。修改 <code>learnlaravel5/database/seeds/DatabaseSeeder.php</code>中的 run 函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function run()</div><div class="line">&#123;</div><div class="line">    $this-&gt;call(ArticleSeeder::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 database 目录没有像 app 目录那样被 composer 注册为 psr-4 自动加载，采用的是 psr-0 classmap 方式，所以我们还需要运行以下命令把<code>ArticleSeeder.php</code>加入自动加载系统，避免找不到类的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer dump-autoload</div></pre></td></tr></table></figure>
<p>然后执行 seed：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan db:seed</div></pre></td></tr></table></figure>
<p>你应该得到如下结果：<br><img src="https://camo.githubusercontent.com/629b71dcd42b94825e9075b5eaada4758b083dbd/68747470733a2f2f646e2d6c7677656e68616e2d636f6d2e71626f782e6d652f323031362d30352d30392d31343632373330353231313336362e6a7067" alt="seed"><br>这时候刷新一下数据库中的 articles 表，会发现已经被插入了 10 行假数据：</p>
<p><img src="http://7xlmi4.dl1.z0.glb.clouddn.com/2016-05-09-14627305849059.jpg" alt="data"></p>
<h4 id="原文：https-github-com-johnlui-Learn-Laravel-5-issues-4"><a href="#原文：https-github-com-johnlui-Learn-Laravel-5-issues-4" class="headerlink" title="原文：https://github.com/johnlui/Learn-Laravel-5/issues/4"></a>原文：<a href="https://github.com/johnlui/Learn-Laravel-5/issues/4" target="_blank" rel="external">https://github.com/johnlui/Learn-Laravel-5/issues/4</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本教程示例代码见：&lt;a href=&quot;https://github.com/johnlui/Learn-Laravel-5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/johnlui/Lear
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>蔡氏效应</title>
    <link href="https://jeristiano.github.io/2017/02/09/%E8%94%A1%E6%B0%8F%E6%95%88%E5%BA%94/"/>
    <id>https://jeristiano.github.io/2017/02/09/蔡氏效应/</id>
    <published>2017-02-09T09:21:46.000Z</published>
    <updated>2017-02-09T09:30:38.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="蔡格尼克记忆效应"><a href="#蔡格尼克记忆效应" class="headerlink" title="蔡格尼克记忆效应"></a>蔡格尼克记忆效应</h2><p><strong>蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。</strong></p>
<hr>
<p><strong>实验背景</strong></p>
<p>蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。</p>
<p><img src="http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg" alt="蔡格尼克记忆效应"><br>Bluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.<br>The picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.</p>
<p>20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.</p>
<hr>
<p><strong>结论应用</strong></p>
<p>很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。<br>对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。<br>非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。</p>
<hr>
<p><strong>相关实例</strong><br>信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？<br>之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。</p>
<p><img src="http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382" alt="不做“工作狂”"></p>
<p>一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。</p>
<p>泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。</p>
<hr>
<p><strong>原因解释</strong></p>
<p>为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。<strong>结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况</strong>。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。</p>
<p>工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;蔡格尼克记忆效应&quot;&gt;&lt;a href=&quot;#蔡格尼克记忆效应&quot; class=&quot;headerlink&quot; title=&quot;蔡格尼克记忆效应&quot;&gt;&lt;/a&gt;蔡格尼克记忆效应&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一
    
    </summary>
    
      <category term="杂谈" scheme="https://jeristiano.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="蔡氏效应" scheme="https://jeristiano.github.io/tags/%E8%94%A1%E6%B0%8F%E6%95%88%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>时间的朋友</title>
    <link href="https://jeristiano.github.io/2017/02/08/friend-of-time/"/>
    <id>https://jeristiano.github.io/2017/02/08/friend-of-time/</id>
    <published>2017-02-08T13:39:18.000Z</published>
    <updated>2017-02-10T06:52:15.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>updated at 2017-02-10<br>pubulished at 2017-02-08</p>
</blockquote>
<ul>
<li>小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系.</li>
<li>巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方</li>
<li>移动互联网的红利已经结束,流量已经被BAT瓜分干净</li>
<li>什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代</li>
<li>在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%.</li>
<li>什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代.</li>
<li>我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)</li>
<li>你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)</li>
<li>只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.</li>
<li>两年前我们糊里糊涂的融了资，然后变成必须以上市为目的公司，……然后发现资本市场找你要的不是钱，也不是生意，他要的是两个字，叫做<strong>增长</strong>。就是你的钱要月挣越多才行，挣很多不行，后来发现他找你要的是不是增长，是<strong>持续</strong>的增长，增长的速度要越来越快，到后来我发现，不对，不对 他要的根本不是增长速度，而是<strong>你的增长速度要超过预期</strong>。老天爷，我现在不管有多好，他们都要求更好，比预期的还好，这是一个什么日子？</li>
<li>我们从小就被灌输一种观念，等我有钱了，有关系了，有资源了，我就可以过的好。那天看二手房，我知道一个道理，无论你有多少钱，多少资源，有些人就有这个能力，仍然过不好这一生。（那些人指的是富人，但是过的并不体面，不讲卫生。）</li>
<li>我们这一生想过的好，跟资源并没有多大关系，一切都是自我。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;updated at 2017-02-10&lt;br&gt;pubulished at 2017-02-08&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;小马过河的故事告诉我们,不用听老水牛的也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这
    
    </summary>
    
      <category term="读书笔记" scheme="https://jeristiano.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="罗辑思维" scheme="https://jeristiano.github.io/tags/%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>laravel数据库以及CURD</title>
    <link href="https://jeristiano.github.io/2017/02/08/laravel-not/"/>
    <id>https://jeristiano.github.io/2017/02/08/laravel-not/</id>
    <published>2017-02-08T06:23:52.000Z</published>
    <updated>2017-02-08T06:50:13.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="db-facade-原始查找"><a href="#db-facade-原始查找" class="headerlink" title="db facade(原始查找)"></a>db facade(原始查找)</h3><blockquote>
<p>使用facade就是使用原始的sql语句来查询修改数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DB::select(&apos;sql 语句&apos;)</div><div class="line">DB::insert(&apos;insert into student (name,age) values(?,?),[&apos;jeremy&apos;,22]&apos;)</div><div class="line">DB::update(&apos;sql 语句&apos;)</div><div class="line">DB::delete(&apos;sql 语句&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="查询构造器"><a href="#查询构造器" class="headerlink" title="查询构造器"></a>查询构造器</h3><blockquote>
<p>使用laravel操作数据库的必备技能</p>
</blockquote>
<h4 id="查询构造器简介及新增数据"><a href="#查询构造器简介及新增数据" class="headerlink" title="查询构造器简介及新增数据"></a>查询构造器简介及新增数据</h4><ul>
<li>larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句</li>
<li>使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//插入新数组返回bool</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;insert([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class="line">//插入新数据得到自增id</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;insertGetId([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class="line">//一次插入多个数据数组</div><div class="line"> DB::table(&apos;tablename&apos;)-&gt;insert([</div><div class="line">		 &apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy1&apos;],</div><div class="line">		 &apos;age&apos;=&gt;19,&apos;name&apos;=&gt;&apos;jeremy2&apos;],</div><div class="line">		 &apos;age&apos;=&gt;17,&apos;name&apos;=&gt;&apos;jeremy3&apos;],</div><div class="line">		 &apos;age&apos;=&gt;16,&apos;name&apos;=&gt;&apos;jeremy4&apos;],</div><div class="line">		 )</div></pre></td></tr></table></figure>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">	-&gt;where(&apos;id&apos;,12)</div><div class="line">	-&gt;update([&apos;age&apos;=&gt;30])</div></pre></td></tr></table></figure>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">	-&gt;where(&apos;id&apos;,&apos;&gt;=&apos;,12)</div><div class="line">	-&gt;delete()</div></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//获得所有数据</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;get();</div><div class="line">//返回第一条记录</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;first();</div><div class="line">//返回结果结果集中某个字段pluck</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;pluck(&apos;name&apos;);</div><div class="line">//返回结果结果集中制定的字段并使用某个键为下标</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;lists(&apos;name&apos;,&apos;id&apos;);</div><div class="line"></div><div class="line">//select查询</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;select(&apos;id&apos;,&apos;name&apos;,&apos;age&apos;)</div><div class="line">-&gt;get();</div><div class="line">//chunk 每次查询n个数据并回调</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;chunk(1000,function($res)&#123;	</div><div class="line">	if($res)&#123;</div><div class="line">	return false;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Eloquent-ORM-Object-Relational-Model"><a href="#Eloquent-ORM-Object-Relational-Model" class="headerlink" title="Eloquent ORM(Object Relational Model )"></a>Eloquent ORM(Object Relational Model )</h3><blockquote>
<p>操作laravel数据库最常用的方式</p>
</blockquote>
<ul>
<li>Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作</li>
<li>每个数据表都有一个与之对应的’模型(Model)’ 用于和数据表交互</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</div><div class="line">	 <span class="comment">//模型与数据库表关联</span></div><div class="line">	<span class="keyword">protected</span> $table=<span class="string">'student'</span>;</div><div class="line">	<span class="comment">//指定id</span></div><div class="line">	<span class="keyword">protected</span> $primaryKey=<span class="string">'id'</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回所有集合对象</span></div><div class="line">$res = student::all();</div><div class="line"><span class="comment">//返回一个集合对象</span></div><div class="line">$res = student::find(<span class="number">1001</span>);</div><div class="line"><span class="comment">//findOrFail查询不到抛出异常</span></div><div class="line">$res = student::findOrFail(<span class="number">1001</span>);</div></pre></td></tr></table></figure>
<p><code>查询构造器的使用</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//查询所有</div><div class="line">Student::get();</div><div class="line">//查询一条</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;)</div><div class="line">-&gt;first();</div><div class="line">//查询n条</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;)</div><div class="line">-&gt;chunk(2000,function($res)&#123;</div><div class="line">	var_dump($res)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>增加数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//此处不允许批量赋值</div><div class="line">Student::create(</div><div class="line">	[&apos;name&apos;=&gt;&apos;jeremy&apos;],</div><div class="line">	[&apos;age&apos;=&gt;12],</div><div class="line">	[&apos;sex&apos;=&gt;1],</div><div class="line">)</div><div class="line">//在模型出加上允许批量赋值的字段名字</div><div class="line">protected $fillable=[&apos;name&apos;,&apos;age&apos;]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//没有该数据则新增此数据</div><div class="line">Student::firstOrCreate()</div><div class="line"></div><div class="line">//没有该数据调用save()后新增此数据</div><div class="line">Student::firstOrNew()-&gt;save();</div></pre></td></tr></table></figure>
<p><code>修改数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//第一种</div><div class="line">$student=Student::find(1020);</div><div class="line">$student-&gt;name=&apos;jeremy&apos;;</div><div class="line">$student-&gt;save();</div><div class="line">//第二种</div><div class="line">Student::where(&apos;id&apos;,12)</div><div class="line">-&gt;update([&apos;name&apos;=&gt;&apos;jeremy&apos;]);</div></pre></td></tr></table></figure></p>
<p><code>删除数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//通过模型删除</div><div class="line">$student= Student::find(1021);</div><div class="line">$student-&gt;delete();</div><div class="line">//通过主键删除</div><div class="line">Student::destroy(1020,1021);</div><div class="line"></div><div class="line">//通过条件删除</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,1004)-delete();</div></pre></td></tr></table></figure></p>
<p><code>pluck</code></p>
<p>获取一列的值<br>若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的<br>数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$titles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;);</div><div class="line">foreach ($titles as $title) &#123;</div><div class="line">echo $title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你也可以在返回的数组中指定自定义的键值字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$roles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;, &apos;name&apos;);</div><div class="line">foreach ($roles as $name =&gt; $title) &#123;</div><div class="line">echo $title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;db-facade-原始查找&quot;&gt;&lt;a href=&quot;#db-facade-原始查找&quot; class=&quot;headerlink&quot; title=&quot;db facade(原始查找)&quot;&gt;&lt;/a&gt;db facade(原始查找)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;使用facad
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>windows系统下安装Composer</title>
    <link href="https://jeristiano.github.io/2017/02/08/firstblog/"/>
    <id>https://jeristiano.github.io/2017/02/08/firstblog/</id>
    <published>2017-02-08T05:25:28.000Z</published>
    <updated>2017-02-08T06:50:22.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Composer介绍"><a href="#Composer介绍" class="headerlink" title="Composer介绍"></a>Composer介绍</h3><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p>
<pre><code>Composer下载
下载地址：getcom poser.org    （去掉空格）
中文镜像：phpcom poser.com  （去掉空格）
</code></pre><p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png" alt="enter image description here"><br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png" alt="enter image description here"></p>
<p>下载成功</p>
<p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png" alt="enter image description here"></p>
<p>准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。</p>
<p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png" alt="enter image description here"></p>
<p>选择NEXT，稍等一会，下载相关组建<br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png" alt="enter image description here"></p>
<p>显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开<br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png" alt="enter image description here"><br>验证是否成功。打开win+R -&gt; cmd 输入 composer,显示如下界面 表示安装成功！<img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png" alt="enter image description here"></p>
<h3 id="启用镜像服务的方式有两种："><a href="#启用镜像服务的方式有两种：" class="headerlink" title="启用镜像服务的方式有两种："></a>启用镜像服务的方式有两种：</h3><pre><code>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。
单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。
</code></pre><p>例1：修改 composer 的全局配置文件（推荐方式）<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<p>上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  "repositories": &#123;</div><div class="line">  "packagist": &#123; </div><div class="line">   "type": "composer", </div><div class="line">   "url": "https://packagist.phpcomposer.com"</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;laravel/laravel&quot;,</div><div class="line">    &quot;description&quot;: &quot;The Laravel Framework.&quot;,</div><div class="line">    &quot;keywords&quot;: [</div><div class="line">        &quot;framework&quot;,</div><div class="line">        &quot;laravel&quot;</div><div class="line">    ],</div><div class="line">    &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">    &quot;type&quot;: &quot;project&quot;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,</div><div class="line">        &quot;laravel/framework&quot;: &quot;5.2.*&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;require-dev&quot;: &#123;</div><div class="line">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class="line">        &quot;mockery/mockery&quot;: &quot;0.9.*&quot;,</div><div class="line">        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,</div><div class="line">        &quot;symfony/css-selector&quot;: &quot;2.8.*|3.0.*&quot;,</div><div class="line">        &quot;symfony/dom-crawler&quot;: &quot;2.8.*|3.0.*&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;database&quot;</div><div class="line">        ],</div><div class="line">        &quot;psr-4&quot;: &#123;</div><div class="line">            &quot;App\\&quot;: &quot;app/&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload-dev&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;tests/TestCase.php&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;scripts&quot;: &#123;</div><div class="line">        &quot;post-root-package-install&quot;: [</div><div class="line">            &quot;php -r \&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\&quot;&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-create-project-cmd&quot;: [</div><div class="line">            &quot;php artisan key:generate&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-install-cmd&quot;: [</div><div class="line">            &quot;php artisan clear-compiled&quot;,</div><div class="line">            &quot;php artisan optimize&quot;</div><div class="line">        ],</div><div class="line">        &quot;pre-update-cmd&quot;: [</div><div class="line">            &quot;php artisan clear-compiled&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-update-cmd&quot;: [</div><div class="line">            &quot;php artisan optimize&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;config&quot;: &#123;</div><div class="line">        &quot;preferred-install&quot;: &quot;dist&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;repositories&quot;: &#123;</div><div class="line">        &quot;packagist&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;composer&quot;,</div><div class="line">            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//转换成中文镜像</div><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class="line">//安装版本</div><div class="line">composer create-project laravel/laravel your-project-name 5.0.*</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Composer介绍&quot;&gt;&lt;a href=&quot;#Composer介绍&quot; class=&quot;headerlink&quot; title=&quot;Composer介绍&quot;&gt;&lt;/a&gt;Composer介绍&lt;/h3&gt;&lt;p&gt;Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jeristiano.github.io/2017/02/07/hello-world/"/>
    <id>https://jeristiano.github.io/2017/02/07/hello-world/</id>
    <published>2017-02-07T07:57:26.707Z</published>
    <updated>2017-02-08T01:50:51.490Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
