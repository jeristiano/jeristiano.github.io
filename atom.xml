<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeremy&#39;s space</title>
  <subtitle>Don&#39;t be evil</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeristiano.github.io/"/>
  <updated>2017-02-09T09:27:50.379Z</updated>
  <id>https://jeristiano.github.io/</id>
  
  <author>
    <name>jeremyK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蔡氏效应</title>
    <link href="https://jeristiano.github.io/2017/02/09/%E8%94%A1%E6%B0%8F%E6%95%88%E5%BA%94/"/>
    <id>https://jeristiano.github.io/2017/02/09/蔡氏效应/</id>
    <published>2017-02-09T09:21:46.000Z</published>
    <updated>2017-02-09T09:27:50.379Z</updated>
    
    <content type="html"><![CDATA[<p>##蔡格尼克记忆效应</p>
<p><strong>蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。</strong></p>
<hr>
<p><strong>实验背景</strong></p>
<p>蔡格尼克记忆效应（Zeigarnik effect），又称为蔡加尼克效应、“契可尼效应”，是指人们天生有一种办事有始有终的驱动力，人们之所以会忘记已完成的工作，是因为欲完成的动机已经得到满足；如果工作尚未完成，这同一动机便使他对此留下深刻印象。</p>
<p><img src="http://www.psychspace.com/psych/attachments/2013/11/17_201311211422071U61d.jpg" alt="蔡格尼克记忆效应"><br>Bluma Zeigarnik with her husband Albert Zeigarnik before arriving in Berlin.<br>The picture was taken in Kovno (now Kaunas), Lithuania, in 1919-1920.</p>
<p>20世纪20年代德国心理学家Β.Β.蔡格尼克在一项记忆实验中发现的心理现象。她让被试者做22件简单的工作，如写下一首你喜欢的诗，从55倒数到17，把一些颜色和形状不同的珠子按一定的模式用线穿起来，等等。完成每件工作所需要的时间大体相等，一般为几分钟。在这些工作中，只有一半允许做完，另一半在没有做完时就受到阻止。允许做完和不允许做完的工作出现的顺序是随机排列的。做完实验后，在出乎被试意料的情况下，立刻让他回忆做了22件什么工作。结果是未完成的工作平均可回忆68%，而已完成的工作只能回忆43%。在上述条件下，未完成的工作比已完成的工作保持得较好，这种现象就叫蔡格尼克效应.</p>
<hr>
<p><strong>结论应用</strong></p>
<p>很多人有与生俱来的完成欲。要做的事一日不完结，一日不得解脱。蔡格尼克效应使人走入两个极端：一个是过分强迫，面对任务非得一气呵成，不完成便死抓着不放手，甚至偏执地将其他任何人事物置身事外；另一端是驱动力过弱，做任何事都拖沓啰嗦，时常半途而废，总是不把一件事情完全完成后再转移目标，永远无法彻底地完成一件事情。<br>对大多数人来说，蔡格尼克效应是推动我们完成工作的重要驱动力。但是有些人会走向极端，要么因为拖拉永远也完不成一件事，要么非得一口气把事做完不可。这两种人都需要调整他们的完成驱动力。<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩；但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。只有减弱过强的驱动力，才可以使人一面做事一面享受人生乐趣。在工作方面，不做完不罢休的人可能是个工作狂。如果把这种态度缓和一下，不仅使你能在周末离开办公室，你还有时间去应付因工作狂带来的问题：自我怀疑，感觉自己能力不够或不能应付紧张等等。<br>非做完不可的人为了避免半途而废，很可能冒把自己封死在一份没有前途的工作上的危险。兴趣一旦变成狂热，就可能是一个警告信号，表示过分强烈的完成驱动力正在渐渐主宰你的消遣活动。</p>
<hr>
<p><strong>相关实例</strong><br>信写了一半，圆珠笔突然不出水了，是随手拿起另一支笔继续写下去还是四处找一支颜色相同的笔，在寻找时思路又转到别的方面去了，而丢下没的信不理？或者，是否被一本间谍小说迷住了，哪怕明天早上有一个重要会议，也要读到凌晨4点仍不释卷？<br>之所以出现这种现象，是因为人们天生有一种办事有始有终的驱动力。请试画一个圆圈，在最后留下一个小缺口，请你这时候再看它一眼，你的心思会倾向于要把这个圆完成。</p>
<p><img src="http://cms.csdnimg.cn/article/201403/28/5334f3925d387_middle.jpg?_=46382" alt="不做“工作狂”"></p>
<p>一个人做事半途而废，也许只是因为害怕失败。他永远不去把一件作品完成，以避免受到批评；同样，只愿永远当学生而不想毕业的人，也许是因为这样就可不必到社会上去工作；也可能由于他在潜意识中就不相信自己会成功，于是害怕成功，因此也就下意识地逃避成功。</p>
<p>泰克医生为有这样心理的人提出一个解决的方法，他说：“如果你精力集中的时间限度是10分钟，而工作要一小时才能做完，那么，你的脑筋一开始散漫你就要停止工作，然后用三分钟的时间活动筋骨，例如跳几下，去倒一杯水，或是做些静力锻炼的肌肉运动；活动过后，再把另一个10分钟花在工作上。”<br>一个从不把工作做完的人，至少能够扩展自己的生活，而且可能生活得丰富多彩，但是一个非把每件事都做完不可的人，驱动力过强，可能导致生活没有规律、太紧张、太狭窄。</p>
<hr>
<p><strong>原因解释</strong></p>
<p>为什么人们对未完成的工作的回忆量会优于已完成的工作?有人认为这是由于未完成的工作引起了情绪上的震动。但如果我们把工作用三种方式处理：第一种是允许其完成，第二种是我们中途加以阻止使它们最终没有完成，第三种是中途加以阻止后我们再让其完成。<strong>结果发现，人们对中途被阻止后再完成的工作的回忆量要优于前两种情况</strong>。而这就不能用中途阻止所产生的情绪所致来解释了，或许我们可以用心理的紧张系统是否得到解除来加以说明。未完成工作所引起的心理紧张系统还没有得到解除，因而回忆量相对大。中途加以阻止的未完成的工作不仅易于回忆，并且在做了其他工作之后，还有继续完成它的趋势。人们对于尚未处理完的事情会有较强烈的去完成它的动机，所以记忆自然也会较为深刻。</p>
<p>工作和生活当中也是如此，你可能对于你目前正在做，但还没完成的事情记忆最深刻，对于已经完成的一些事情或许就不会给予太多关注了。其实这也符合人们的记忆规律，人的大脑总是记住一些需要加工的内容，将之放在工作记忆中，就像是电脑的内存一样，而对于已经完成或将要完成的内容大脑则会有意地去遗忘</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##蔡格尼克记忆效应&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;蔡格尼克记忆效应（Zeigarnik effect；又称蔡加尼克效应） 是一种记忆效应，指人们对于尚未处理完的事情，比已处理完成的事情印象更加深刻。 这个现象是由蔡格尼克通过实验得出的结论。&lt;/strong&gt;&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="杂谈" scheme="https://jeristiano.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="蔡氏效应" scheme="https://jeristiano.github.io/tags/%E8%94%A1%E6%B0%8F%E6%95%88%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>时间的朋友</title>
    <link href="https://jeristiano.github.io/2017/02/08/friend-of-time/"/>
    <id>https://jeristiano.github.io/2017/02/08/friend-of-time/</id>
    <published>2017-02-08T13:39:18.000Z</published>
    <updated>2017-02-08T13:42:09.397Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>小马过河的故事告诉我们,不用听老水牛的，也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系。</li>
<li>巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方。</li>
<li>移动互联网的红利已经结束,流量已经被BAT瓜分干净。</li>
<li>什么样的人会被人工智能所替代呢? 答案是:只要你的技能是某种特定的领域,那么你迟早会被替代。</li>
<li>在美国大概有40%的工作岗位会被人工智能替代,而中国会有70%。</li>
<li>什么样的人不会被人工智能替代?只要你的领导力和创造力突出你就可能不会被替代。</li>
<li>我们都认为进步是好,但是比进步更好的是缓慢的进步(人工智能带来的冲击)。</li>
<li>你只需要抽出20%的时间去了解一个领域80%的知识就足够了(财新网主编王朔)。</li>
<li>只是拥有一个专业的技能,结果就很可能被替代,未来与人工智能博弈比的是跨界的能力,就像一个游牧民族,哪里有丰富的水草就游牧到哪里.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;小马过河的故事告诉我们,不用听老水牛的，也不用在意小松鼠说什么,他们 的处境和你不一样,他们在这条河里的浮沉和你没有任何关系。&lt;/li&gt;
&lt;li&gt;巴菲的的合伙人查理芒格讲:宏观是我们必须承受的,微观才是我们有所作为的地方。&lt;/li&gt;
&lt;li&gt;移动互联网的红利已经
    
    </summary>
    
      <category term="读书笔记" scheme="https://jeristiano.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="罗辑思维" scheme="https://jeristiano.github.io/tags/%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>laravel数据库以及CURD</title>
    <link href="https://jeristiano.github.io/2017/02/08/laravel-not/"/>
    <id>https://jeristiano.github.io/2017/02/08/laravel-not/</id>
    <published>2017-02-08T06:23:52.000Z</published>
    <updated>2017-02-08T06:50:13.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="db-facade-原始查找"><a href="#db-facade-原始查找" class="headerlink" title="db facade(原始查找)"></a>db facade(原始查找)</h3><blockquote>
<p>使用facade就是使用原始的sql语句来查询修改数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DB::select(&apos;sql 语句&apos;)</div><div class="line">DB::insert(&apos;insert into student (name,age) values(?,?),[&apos;jeremy&apos;,22]&apos;)</div><div class="line">DB::update(&apos;sql 语句&apos;)</div><div class="line">DB::delete(&apos;sql 语句&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="查询构造器"><a href="#查询构造器" class="headerlink" title="查询构造器"></a>查询构造器</h3><blockquote>
<p>使用laravel操作数据库的必备技能</p>
</blockquote>
<h4 id="查询构造器简介及新增数据"><a href="#查询构造器简介及新增数据" class="headerlink" title="查询构造器简介及新增数据"></a>查询构造器简介及新增数据</h4><ul>
<li>larevel查询构造器(query bulider)提供方便/流畅的接口,用来建立及执行数据库查找语句</li>
<li>使用PDO 参数绑定,以保护应用程序免于sql注入因此传入的参数不需额外转意特殊字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//插入新数组返回bool</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;insert([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class="line">//插入新数据得到自增id</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;insertGetId([&apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy&apos;])</div><div class="line">//一次插入多个数据数组</div><div class="line"> DB::table(&apos;tablename&apos;)-&gt;insert([</div><div class="line">		 &apos;age&apos;=&gt;18,&apos;name&apos;=&gt;&apos;jeremy1&apos;],</div><div class="line">		 &apos;age&apos;=&gt;19,&apos;name&apos;=&gt;&apos;jeremy2&apos;],</div><div class="line">		 &apos;age&apos;=&gt;17,&apos;name&apos;=&gt;&apos;jeremy3&apos;],</div><div class="line">		 &apos;age&apos;=&gt;16,&apos;name&apos;=&gt;&apos;jeremy4&apos;],</div><div class="line">		 )</div></pre></td></tr></table></figure>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">	-&gt;where(&apos;id&apos;,12)</div><div class="line">	-&gt;update([&apos;age&apos;=&gt;30])</div></pre></td></tr></table></figure>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">	-&gt;where(&apos;id&apos;,&apos;&gt;=&apos;,12)</div><div class="line">	-&gt;delete()</div></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//获得所有数据</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;get();</div><div class="line">//返回第一条记录</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;first();</div><div class="line">//返回结果结果集中某个字段pluck</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;pluck(&apos;name&apos;);</div><div class="line">//返回结果结果集中制定的字段并使用某个键为下标</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;,&apos;desc&apos;)</div><div class="line">-&gt;lists(&apos;name&apos;,&apos;id&apos;);</div><div class="line"></div><div class="line">//select查询</div><div class="line">DB::table(&apos;tablename&apos;)</div><div class="line">-&gt;select(&apos;id&apos;,&apos;name&apos;,&apos;age&apos;)</div><div class="line">-&gt;get();</div><div class="line">//chunk 每次查询n个数据并回调</div><div class="line">DB::table(&apos;tablename&apos;)-&gt;chunk(1000,function($res)&#123;	</div><div class="line">	if($res)&#123;</div><div class="line">	return false;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Eloquent-ORM-Object-Relational-Model"><a href="#Eloquent-ORM-Object-Relational-Model" class="headerlink" title="Eloquent ORM(Object Relational Model )"></a>Eloquent ORM(Object Relational Model )</h3><blockquote>
<p>操作laravel数据库最常用的方式</p>
</blockquote>
<ul>
<li>Laravel 所自带的Eloquent ORM是一哥优美 简洁的ActiveRecord实现,用来实现数据库操作</li>
<li>每个数据表都有一个与之对应的’模型(Model)’ 用于和数据表交互</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</div><div class="line">	 <span class="comment">//模型与数据库表关联</span></div><div class="line">	<span class="keyword">protected</span> $table=<span class="string">'student'</span>;</div><div class="line">	<span class="comment">//指定id</span></div><div class="line">	<span class="keyword">protected</span> $primaryKey=<span class="string">'id'</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回所有集合对象</span></div><div class="line">$res = student::all();</div><div class="line"><span class="comment">//返回一个集合对象</span></div><div class="line">$res = student::find(<span class="number">1001</span>);</div><div class="line"><span class="comment">//findOrFail查询不到抛出异常</span></div><div class="line">$res = student::findOrFail(<span class="number">1001</span>);</div></pre></td></tr></table></figure>
<p><code>查询构造器的使用</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//查询所有</div><div class="line">Student::get();</div><div class="line">//查询一条</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;)</div><div class="line">-&gt;first();</div><div class="line">//查询n条</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,&apos;1001&apos;)</div><div class="line">-&gt;orderBy(&apos;id&apos;)</div><div class="line">-&gt;chunk(2000,function($res)&#123;</div><div class="line">	var_dump($res)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>增加数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//此处不允许批量赋值</div><div class="line">Student::create(</div><div class="line">	[&apos;name&apos;=&gt;&apos;jeremy&apos;],</div><div class="line">	[&apos;age&apos;=&gt;12],</div><div class="line">	[&apos;sex&apos;=&gt;1],</div><div class="line">)</div><div class="line">//在模型出加上允许批量赋值的字段名字</div><div class="line">protected $fillable=[&apos;name&apos;,&apos;age&apos;]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//没有该数据则新增此数据</div><div class="line">Student::firstOrCreate()</div><div class="line"></div><div class="line">//没有该数据调用save()后新增此数据</div><div class="line">Student::firstOrNew()-&gt;save();</div></pre></td></tr></table></figure>
<p><code>修改数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//第一种</div><div class="line">$student=Student::find(1020);</div><div class="line">$student-&gt;name=&apos;jeremy&apos;;</div><div class="line">$student-&gt;save();</div><div class="line">//第二种</div><div class="line">Student::where(&apos;id&apos;,12)</div><div class="line">-&gt;update([&apos;name&apos;=&gt;&apos;jeremy&apos;]);</div></pre></td></tr></table></figure></p>
<p><code>删除数据</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//通过模型删除</div><div class="line">$student= Student::find(1021);</div><div class="line">$student-&gt;delete();</div><div class="line">//通过主键删除</div><div class="line">Student::destroy(1020,1021);</div><div class="line"></div><div class="line">//通过条件删除</div><div class="line">Student::where(&apos;id&apos;,&apos;&gt;&apos;,1004)-delete();</div></pre></td></tr></table></figure></p>
<p><code>pluck</code></p>
<p>获取一列的值<br>若你想要获取一个包含单个字段值的数组，你可以使用 pluck 方法。在这个例子中，我们将取出 roles 数据表 title 字段的<br>数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$titles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;);</div><div class="line">foreach ($titles as $title) &#123;</div><div class="line">echo $title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你也可以在返回的数组中指定自定义的键值字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$roles = DB::table(&apos;roles&apos;)-&gt;pluck(&apos;title&apos;, &apos;name&apos;);</div><div class="line">foreach ($roles as $name =&gt; $title) &#123;</div><div class="line">echo $title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;db-facade-原始查找&quot;&gt;&lt;a href=&quot;#db-facade-原始查找&quot; class=&quot;headerlink&quot; title=&quot;db facade(原始查找)&quot;&gt;&lt;/a&gt;db facade(原始查找)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;使用facad
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>windows系统下安装Composer</title>
    <link href="https://jeristiano.github.io/2017/02/08/firstblog/"/>
    <id>https://jeristiano.github.io/2017/02/08/firstblog/</id>
    <published>2017-02-08T05:25:28.000Z</published>
    <updated>2017-02-08T06:50:22.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Composer介绍"><a href="#Composer介绍" class="headerlink" title="Composer介绍"></a>Composer介绍</h3><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p>
<pre><code>Composer下载
下载地址：getcom poser.org    （去掉空格）
中文镜像：phpcom poser.com  （去掉空格）
</code></pre><p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/195921o2z605a55amqa0sa.png" alt="enter image description here"><br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200038h15g31yj3g81f1cw.png" alt="enter image description here"></p>
<p>下载成功</p>
<p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200051x4vpp55tnvs22ijw.png" alt="enter image description here"></p>
<p>准备安装软件，双击软件就可以安装此软件 默认安装装就可以了，并会自动搜索PHP.exe的安装路径。</p>
<p><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200115pkkwe9i9irzkv3ca.png" alt="enter image description here"></p>
<p>选择NEXT，稍等一会，下载相关组建<br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200313dwreyedxfdasfjoz.png" alt="enter image description here"></p>
<p>显示此页面表示安装完成！如果报错 就检查 PHP扩展的OpenSSL 有没有打开<br><img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200343xgdse66jstrh8jwj.png" alt="enter image description here"><br>验证是否成功。打开win+R -&gt; cmd 输入 composer,显示如下界面 表示安装成功！<img src="http://bbs.houdunwang.com/data/attachment/forum/201603/17/200400utwp9i3qaipka3w7.png" alt="enter image description here"></p>
<h3 id="启用镜像服务的方式有两种："><a href="#启用镜像服务的方式有两种：" class="headerlink" title="启用镜像服务的方式有两种："></a>启用镜像服务的方式有两种：</h3><pre><code>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。
单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。
</code></pre><p>例1：修改 composer 的全局配置文件（推荐方式）<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<p>上述命令将会在当前项目中的 composer.json文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  "repositories": &#123;</div><div class="line">  "packagist": &#123; </div><div class="line">   "type": "composer", </div><div class="line">   "url": "https://packagist.phpcomposer.com"</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;laravel/laravel&quot;,</div><div class="line">    &quot;description&quot;: &quot;The Laravel Framework.&quot;,</div><div class="line">    &quot;keywords&quot;: [</div><div class="line">        &quot;framework&quot;,</div><div class="line">        &quot;laravel&quot;</div><div class="line">    ],</div><div class="line">    &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">    &quot;type&quot;: &quot;project&quot;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,</div><div class="line">        &quot;laravel/framework&quot;: &quot;5.2.*&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;require-dev&quot;: &#123;</div><div class="line">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class="line">        &quot;mockery/mockery&quot;: &quot;0.9.*&quot;,</div><div class="line">        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,</div><div class="line">        &quot;symfony/css-selector&quot;: &quot;2.8.*|3.0.*&quot;,</div><div class="line">        &quot;symfony/dom-crawler&quot;: &quot;2.8.*|3.0.*&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;database&quot;</div><div class="line">        ],</div><div class="line">        &quot;psr-4&quot;: &#123;</div><div class="line">            &quot;App\\&quot;: &quot;app/&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload-dev&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;tests/TestCase.php&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;scripts&quot;: &#123;</div><div class="line">        &quot;post-root-package-install&quot;: [</div><div class="line">            &quot;php -r \&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\&quot;&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-create-project-cmd&quot;: [</div><div class="line">            &quot;php artisan key:generate&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-install-cmd&quot;: [</div><div class="line">            &quot;php artisan clear-compiled&quot;,</div><div class="line">            &quot;php artisan optimize&quot;</div><div class="line">        ],</div><div class="line">        &quot;pre-update-cmd&quot;: [</div><div class="line">            &quot;php artisan clear-compiled&quot;</div><div class="line">        ],</div><div class="line">        &quot;post-update-cmd&quot;: [</div><div class="line">            &quot;php artisan optimize&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;config&quot;: &#123;</div><div class="line">        &quot;preferred-install&quot;: &quot;dist&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;repositories&quot;: &#123;</div><div class="line">        &quot;packagist&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;composer&quot;,</div><div class="line">            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//转换成中文镜像</div><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div><div class="line">//安装版本</div><div class="line">composer create-project laravel/laravel your-project-name 5.0.*</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Composer介绍&quot;&gt;&lt;a href=&quot;#Composer介绍&quot; class=&quot;headerlink&quot; title=&quot;Composer介绍&quot;&gt;&lt;/a&gt;Composer介绍&lt;/h3&gt;&lt;p&gt;Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代
    
    </summary>
    
      <category term="编程" scheme="https://jeristiano.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://jeristiano.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jeristiano.github.io/2017/02/07/hello-world/"/>
    <id>https://jeristiano.github.io/2017/02/07/hello-world/</id>
    <published>2017-02-07T07:57:26.707Z</published>
    <updated>2017-02-08T01:50:51.490Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
